import type { ProductQueryType, RequestPurchaseProps, RequestPurchaseResult } from '../types';
import type { ActiveSubscription, Product, Purchase, PurchaseError, ProductSubscription } from '../types';
import type { FinishTransactionParams } from '../';
import type { NitroPurchaseResult } from '../specs/RnIap.nitro';
type UseIap = {
    connected: boolean;
    products: Product[];
    promotedProductsIOS: Purchase[];
    promotedProductIdIOS?: string;
    subscriptions: ProductSubscription[];
    availablePurchases: Purchase[];
    promotedProductIOS?: Product;
    activeSubscriptions: ActiveSubscription[];
    finishTransaction: ({ purchase, isConsumable, }: FinishTransactionParams) => Promise<NitroPurchaseResult | boolean>;
    getAvailablePurchases: (skus?: string[]) => Promise<void>;
    fetchProducts: (params: {
        skus: string[];
        type?: ProductQueryType | null;
    }) => Promise<void>;
    /**
     * @deprecated Use fetchProducts({ skus, type: 'in-app' }) instead. This method will be removed in version 3.0.0.
     * Note: This method internally uses fetchProducts, so no deprecation warning is shown.
     */
    getProducts: (skus: string[]) => Promise<void>;
    /**
     * @deprecated Use fetchProducts({ skus, type: 'subs' }) instead. This method will be removed in version 3.0.0.
     * Note: This method internally uses fetchProducts, so no deprecation warning is shown.
     */
    getSubscriptions: (skus: string[]) => Promise<void>;
    requestPurchase: (params: RequestPurchaseProps) => Promise<RequestPurchaseResult>;
    validateReceipt: (sku: string, androidOptions?: {
        packageName: string;
        productToken: string;
        accessToken: string;
        isSub?: boolean;
    }) => Promise<any>;
    restorePurchases: () => Promise<void>;
    getPromotedProductIOS: () => Promise<Product | null>;
    requestPurchaseOnPromotedProductIOS: () => Promise<void>;
    getActiveSubscriptions: (subscriptionIds?: string[]) => Promise<ActiveSubscription[]>;
    hasActiveSubscriptions: (subscriptionIds?: string[]) => Promise<boolean>;
};
export interface UseIapOptions {
    onPurchaseSuccess?: (purchase: Purchase) => void;
    onPurchaseError?: (error: PurchaseError) => void;
    onSyncError?: (error: Error) => void;
    shouldAutoSyncPurchases?: boolean;
    onPromotedProductIOS?: (product: Product) => void;
}
/**
 * React Hook for managing In-App Purchases.
 * See documentation at https://react-native-iap.hyo.dev/docs/hooks/useIAP
 */
export declare function useIAP(options?: UseIapOptions): UseIap;
export {};
//# sourceMappingURL=useIAP.d.ts.map