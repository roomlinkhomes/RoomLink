///
/// RequestPurchaseResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `PurchaseAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct PurchaseAndroid; }
// Forward declaration of `PurchaseIOS` to properly resolve imports.
namespace margelo::nitro::iap { struct PurchaseIOS; }

#include "PurchaseAndroid.hpp"
#include "PurchaseIOS.hpp"
#include <variant>
#include <optional>
#include <vector>

namespace margelo::nitro::iap {

  /**
   * A struct which can be represented as a JavaScript object (RequestPurchaseResult).
   */
  struct RequestPurchaseResult {
  public:
    std::optional<std::variant<PurchaseAndroid, PurchaseIOS>> purchase     SWIFT_PRIVATE;
    std::optional<std::vector<std::variant<PurchaseAndroid, PurchaseIOS>>> purchases     SWIFT_PRIVATE;

  public:
    RequestPurchaseResult() = default;
    explicit RequestPurchaseResult(std::optional<std::variant<PurchaseAndroid, PurchaseIOS>> purchase, std::optional<std::vector<std::variant<PurchaseAndroid, PurchaseIOS>>> purchases): purchase(purchase), purchases(purchases) {}
  };

} // namespace margelo::nitro::iap

namespace margelo::nitro {

  // C++ RequestPurchaseResult <> JS RequestPurchaseResult (object)
  template <>
  struct JSIConverter<margelo::nitro::iap::RequestPurchaseResult> final {
    static inline margelo::nitro::iap::RequestPurchaseResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::iap::RequestPurchaseResult(
        JSIConverter<std::optional<std::variant<margelo::nitro::iap::PurchaseAndroid, margelo::nitro::iap::PurchaseIOS>>>::fromJSI(runtime, obj.getProperty(runtime, "purchase")),
        JSIConverter<std::optional<std::vector<std::variant<margelo::nitro::iap::PurchaseAndroid, margelo::nitro::iap::PurchaseIOS>>>>::fromJSI(runtime, obj.getProperty(runtime, "purchases"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::iap::RequestPurchaseResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "purchase", JSIConverter<std::optional<std::variant<margelo::nitro::iap::PurchaseAndroid, margelo::nitro::iap::PurchaseIOS>>>::toJSI(runtime, arg.purchase));
      obj.setProperty(runtime, "purchases", JSIConverter<std::optional<std::vector<std::variant<margelo::nitro::iap::PurchaseAndroid, margelo::nitro::iap::PurchaseIOS>>>>::toJSI(runtime, arg.purchases));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::variant<margelo::nitro::iap::PurchaseAndroid, margelo::nitro::iap::PurchaseIOS>>>::canConvert(runtime, obj.getProperty(runtime, "purchase"))) return false;
      if (!JSIConverter<std::optional<std::vector<std::variant<margelo::nitro::iap::PurchaseAndroid, margelo::nitro::iap::PurchaseIOS>>>>::canConvert(runtime, obj.getProperty(runtime, "purchases"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
