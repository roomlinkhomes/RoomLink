///
/// NitroPurchaseResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::iap {

  /**
   * A struct which can be represented as a JavaScript object (NitroPurchaseResult).
   */
  struct NitroPurchaseResult {
  public:
    double responseCode     SWIFT_PRIVATE;
    std::optional<std::string> debugMessage     SWIFT_PRIVATE;
    std::string code     SWIFT_PRIVATE;
    std::string message     SWIFT_PRIVATE;
    std::optional<std::string> purchaseToken     SWIFT_PRIVATE;

  public:
    NitroPurchaseResult() = default;
    explicit NitroPurchaseResult(double responseCode, std::optional<std::string> debugMessage, std::string code, std::string message, std::optional<std::string> purchaseToken): responseCode(responseCode), debugMessage(debugMessage), code(code), message(message), purchaseToken(purchaseToken) {}
  };

} // namespace margelo::nitro::iap

namespace margelo::nitro {

  // C++ NitroPurchaseResult <> JS NitroPurchaseResult (object)
  template <>
  struct JSIConverter<margelo::nitro::iap::NitroPurchaseResult> final {
    static inline margelo::nitro::iap::NitroPurchaseResult fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::iap::NitroPurchaseResult(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "responseCode")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "debugMessage")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "code")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "message")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "purchaseToken"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::iap::NitroPurchaseResult& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "responseCode", JSIConverter<double>::toJSI(runtime, arg.responseCode));
      obj.setProperty(runtime, "debugMessage", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.debugMessage));
      obj.setProperty(runtime, "code", JSIConverter<std::string>::toJSI(runtime, arg.code));
      obj.setProperty(runtime, "message", JSIConverter<std::string>::toJSI(runtime, arg.message));
      obj.setProperty(runtime, "purchaseToken", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.purchaseToken));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "responseCode"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "debugMessage"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "code"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "message"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "purchaseToken"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
