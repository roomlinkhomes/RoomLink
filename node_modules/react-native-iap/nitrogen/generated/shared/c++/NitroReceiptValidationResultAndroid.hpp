///
/// NitroReceiptValidationResultAndroid.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <optional>
#include <string>

namespace margelo::nitro::iap {

  /**
   * A struct which can be represented as a JavaScript object (NitroReceiptValidationResultAndroid).
   */
  struct NitroReceiptValidationResultAndroid {
  public:
    bool autoRenewing     SWIFT_PRIVATE;
    bool betaProduct     SWIFT_PRIVATE;
    std::optional<double> cancelDate     SWIFT_PRIVATE;
    std::string cancelReason     SWIFT_PRIVATE;
    std::optional<double> deferredDate     SWIFT_PRIVATE;
    std::optional<double> deferredSku     SWIFT_PRIVATE;
    double freeTrialEndDate     SWIFT_PRIVATE;
    double gracePeriodEndDate     SWIFT_PRIVATE;
    std::string parentProductId     SWIFT_PRIVATE;
    std::string productId     SWIFT_PRIVATE;
    std::string productType     SWIFT_PRIVATE;
    double purchaseDate     SWIFT_PRIVATE;
    double quantity     SWIFT_PRIVATE;
    std::string receiptId     SWIFT_PRIVATE;
    double renewalDate     SWIFT_PRIVATE;
    std::string term     SWIFT_PRIVATE;
    std::string termSku     SWIFT_PRIVATE;
    bool testTransaction     SWIFT_PRIVATE;

  public:
    NitroReceiptValidationResultAndroid() = default;
    explicit NitroReceiptValidationResultAndroid(bool autoRenewing, bool betaProduct, std::optional<double> cancelDate, std::string cancelReason, std::optional<double> deferredDate, std::optional<double> deferredSku, double freeTrialEndDate, double gracePeriodEndDate, std::string parentProductId, std::string productId, std::string productType, double purchaseDate, double quantity, std::string receiptId, double renewalDate, std::string term, std::string termSku, bool testTransaction): autoRenewing(autoRenewing), betaProduct(betaProduct), cancelDate(cancelDate), cancelReason(cancelReason), deferredDate(deferredDate), deferredSku(deferredSku), freeTrialEndDate(freeTrialEndDate), gracePeriodEndDate(gracePeriodEndDate), parentProductId(parentProductId), productId(productId), productType(productType), purchaseDate(purchaseDate), quantity(quantity), receiptId(receiptId), renewalDate(renewalDate), term(term), termSku(termSku), testTransaction(testTransaction) {}
  };

} // namespace margelo::nitro::iap

namespace margelo::nitro {

  // C++ NitroReceiptValidationResultAndroid <> JS NitroReceiptValidationResultAndroid (object)
  template <>
  struct JSIConverter<margelo::nitro::iap::NitroReceiptValidationResultAndroid> final {
    static inline margelo::nitro::iap::NitroReceiptValidationResultAndroid fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::iap::NitroReceiptValidationResultAndroid(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "autoRenewing")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "betaProduct")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "cancelDate")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "cancelReason")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "deferredDate")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "deferredSku")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "freeTrialEndDate")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "gracePeriodEndDate")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "parentProductId")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "productId")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "productType")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "purchaseDate")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "quantity")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "receiptId")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "renewalDate")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "term")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "termSku")),
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "testTransaction"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::iap::NitroReceiptValidationResultAndroid& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "autoRenewing", JSIConverter<bool>::toJSI(runtime, arg.autoRenewing));
      obj.setProperty(runtime, "betaProduct", JSIConverter<bool>::toJSI(runtime, arg.betaProduct));
      obj.setProperty(runtime, "cancelDate", JSIConverter<std::optional<double>>::toJSI(runtime, arg.cancelDate));
      obj.setProperty(runtime, "cancelReason", JSIConverter<std::string>::toJSI(runtime, arg.cancelReason));
      obj.setProperty(runtime, "deferredDate", JSIConverter<std::optional<double>>::toJSI(runtime, arg.deferredDate));
      obj.setProperty(runtime, "deferredSku", JSIConverter<std::optional<double>>::toJSI(runtime, arg.deferredSku));
      obj.setProperty(runtime, "freeTrialEndDate", JSIConverter<double>::toJSI(runtime, arg.freeTrialEndDate));
      obj.setProperty(runtime, "gracePeriodEndDate", JSIConverter<double>::toJSI(runtime, arg.gracePeriodEndDate));
      obj.setProperty(runtime, "parentProductId", JSIConverter<std::string>::toJSI(runtime, arg.parentProductId));
      obj.setProperty(runtime, "productId", JSIConverter<std::string>::toJSI(runtime, arg.productId));
      obj.setProperty(runtime, "productType", JSIConverter<std::string>::toJSI(runtime, arg.productType));
      obj.setProperty(runtime, "purchaseDate", JSIConverter<double>::toJSI(runtime, arg.purchaseDate));
      obj.setProperty(runtime, "quantity", JSIConverter<double>::toJSI(runtime, arg.quantity));
      obj.setProperty(runtime, "receiptId", JSIConverter<std::string>::toJSI(runtime, arg.receiptId));
      obj.setProperty(runtime, "renewalDate", JSIConverter<double>::toJSI(runtime, arg.renewalDate));
      obj.setProperty(runtime, "term", JSIConverter<std::string>::toJSI(runtime, arg.term));
      obj.setProperty(runtime, "termSku", JSIConverter<std::string>::toJSI(runtime, arg.termSku));
      obj.setProperty(runtime, "testTransaction", JSIConverter<bool>::toJSI(runtime, arg.testTransaction));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "autoRenewing"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "betaProduct"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "cancelDate"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "cancelReason"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "deferredDate"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "deferredSku"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "freeTrialEndDate"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "gracePeriodEndDate"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "parentProductId"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "productId"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "productType"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "purchaseDate"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "quantity"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "receiptId"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "renewalDate"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "term"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "termSku"))) return false;
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "testTransaction"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
