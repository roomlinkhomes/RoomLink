///
/// NitroSubscriptionStatus.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `NitroSubscriptionRenewalInfo` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroSubscriptionRenewalInfo; }

#include <string>
#include "NitroSubscriptionRenewalInfo.hpp"
#include <optional>

namespace margelo::nitro::iap {

  /**
   * A struct which can be represented as a JavaScript object (NitroSubscriptionStatus).
   */
  struct NitroSubscriptionStatus {
  public:
    double state     SWIFT_PRIVATE;
    std::string platform     SWIFT_PRIVATE;
    std::optional<NitroSubscriptionRenewalInfo> renewalInfo     SWIFT_PRIVATE;

  public:
    NitroSubscriptionStatus() = default;
    explicit NitroSubscriptionStatus(double state, std::string platform, std::optional<NitroSubscriptionRenewalInfo> renewalInfo): state(state), platform(platform), renewalInfo(renewalInfo) {}
  };

} // namespace margelo::nitro::iap

namespace margelo::nitro {

  // C++ NitroSubscriptionStatus <> JS NitroSubscriptionStatus (object)
  template <>
  struct JSIConverter<margelo::nitro::iap::NitroSubscriptionStatus> final {
    static inline margelo::nitro::iap::NitroSubscriptionStatus fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::iap::NitroSubscriptionStatus(
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "state")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "platform")),
        JSIConverter<std::optional<margelo::nitro::iap::NitroSubscriptionRenewalInfo>>::fromJSI(runtime, obj.getProperty(runtime, "renewalInfo"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::iap::NitroSubscriptionStatus& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "state", JSIConverter<double>::toJSI(runtime, arg.state));
      obj.setProperty(runtime, "platform", JSIConverter<std::string>::toJSI(runtime, arg.platform));
      obj.setProperty(runtime, "renewalInfo", JSIConverter<std::optional<margelo::nitro::iap::NitroSubscriptionRenewalInfo>>::toJSI(runtime, arg.renewalInfo));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "state"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "platform"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::iap::NitroSubscriptionRenewalInfo>>::canConvert(runtime, obj.getProperty(runtime, "renewalInfo"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
