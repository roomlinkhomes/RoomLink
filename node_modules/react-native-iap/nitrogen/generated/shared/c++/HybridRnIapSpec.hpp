///
/// HybridRnIapSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/HybridObject.hpp>)
#include <NitroModules/HybridObject.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `NitroProduct` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroProduct; }
// Forward declaration of `RequestPurchaseResult` to properly resolve imports.
namespace margelo::nitro::iap { struct RequestPurchaseResult; }
// Forward declaration of `NitroPurchaseRequest` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroPurchaseRequest; }
// Forward declaration of `NitroPurchase` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroPurchase; }
// Forward declaration of `NitroAvailablePurchasesOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroAvailablePurchasesOptions; }
// Forward declaration of `NitroPurchaseResult` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroPurchaseResult; }
// Forward declaration of `NitroFinishTransactionParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroFinishTransactionParams; }
// Forward declaration of `NitroSubscriptionStatus` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroSubscriptionStatus; }
// Forward declaration of `NitroReceiptValidationResultIOS` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationResultIOS; }
// Forward declaration of `NitroReceiptValidationResultAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationResultAndroid; }
// Forward declaration of `NitroReceiptValidationParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationParams; }
// Forward declaration of `NitroDeepLinkOptionsAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroDeepLinkOptionsAndroid; }

#include <NitroModules/Promise.hpp>
#include "NitroProduct.hpp"
#include <vector>
#include <string>
#include "RequestPurchaseResult.hpp"
#include "NitroPurchaseRequest.hpp"
#include "NitroPurchase.hpp"
#include "NitroAvailablePurchasesOptions.hpp"
#include <optional>
#include "NitroPurchaseResult.hpp"
#include <variant>
#include "NitroFinishTransactionParams.hpp"
#include <functional>
#include "NitroSubscriptionStatus.hpp"
#include "NitroReceiptValidationResultIOS.hpp"
#include "NitroReceiptValidationResultAndroid.hpp"
#include "NitroReceiptValidationParams.hpp"
#include "NitroDeepLinkOptionsAndroid.hpp"

namespace margelo::nitro::iap {

  using namespace margelo::nitro;

  /**
   * An abstract base class for `RnIap`
   * Inherit this class to create instances of `HybridRnIapSpec` in C++.
   * You must explicitly call `HybridObject`'s constructor yourself, because it is virtual.
   * @example
   * ```cpp
   * class HybridRnIap: public HybridRnIapSpec {
   * public:
   *   HybridRnIap(...): HybridObject(TAG) { ... }
   *   // ...
   * };
   * ```
   */
  class HybridRnIapSpec: public virtual HybridObject {
    public:
      // Constructor
      explicit HybridRnIapSpec(): HybridObject(TAG) { }

      // Destructor
      ~HybridRnIapSpec() override = default;

    public:
      // Properties
      

    public:
      // Methods
      virtual std::shared_ptr<Promise<bool>> initConnection() = 0;
      virtual std::shared_ptr<Promise<bool>> endConnection() = 0;
      virtual std::shared_ptr<Promise<std::vector<NitroProduct>>> fetchProducts(const std::vector<std::string>& skus, const std::string& type) = 0;
      virtual std::shared_ptr<Promise<RequestPurchaseResult>> requestPurchase(const NitroPurchaseRequest& request) = 0;
      virtual std::shared_ptr<Promise<std::vector<NitroPurchase>>> getAvailablePurchases(const std::optional<NitroAvailablePurchasesOptions>& options) = 0;
      virtual std::shared_ptr<Promise<std::variant<bool, NitroPurchaseResult>>> finishTransaction(const NitroFinishTransactionParams& params) = 0;
      virtual void addPurchaseUpdatedListener(const std::function<void(const NitroPurchase& /* purchase */)>& listener) = 0;
      virtual void addPurchaseErrorListener(const std::function<void(const NitroPurchaseResult& /* error */)>& listener) = 0;
      virtual void removePurchaseUpdatedListener(const std::function<void(const NitroPurchase& /* purchase */)>& listener) = 0;
      virtual void removePurchaseErrorListener(const std::function<void(const NitroPurchaseResult& /* error */)>& listener) = 0;
      virtual void addPromotedProductListenerIOS(const std::function<void(const NitroProduct& /* product */)>& listener) = 0;
      virtual void removePromotedProductListenerIOS(const std::function<void(const NitroProduct& /* product */)>& listener) = 0;
      virtual std::shared_ptr<Promise<std::string>> getStorefrontIOS() = 0;
      virtual std::shared_ptr<Promise<std::optional<std::string>>> getAppTransactionIOS() = 0;
      virtual std::shared_ptr<Promise<std::optional<NitroProduct>>> requestPromotedProductIOS() = 0;
      virtual std::shared_ptr<Promise<void>> buyPromotedProductIOS() = 0;
      virtual std::shared_ptr<Promise<bool>> presentCodeRedemptionSheetIOS() = 0;
      virtual std::shared_ptr<Promise<void>> clearTransactionIOS() = 0;
      virtual std::shared_ptr<Promise<std::optional<std::string>>> beginRefundRequestIOS(const std::string& sku) = 0;
      virtual std::shared_ptr<Promise<std::optional<std::vector<NitroSubscriptionStatus>>>> subscriptionStatusIOS(const std::string& sku) = 0;
      virtual std::shared_ptr<Promise<std::optional<NitroPurchase>>> currentEntitlementIOS(const std::string& sku) = 0;
      virtual std::shared_ptr<Promise<std::optional<NitroPurchase>>> latestTransactionIOS(const std::string& sku) = 0;
      virtual std::shared_ptr<Promise<std::vector<NitroPurchase>>> getPendingTransactionsIOS() = 0;
      virtual std::shared_ptr<Promise<bool>> syncIOS() = 0;
      virtual std::shared_ptr<Promise<std::vector<NitroPurchase>>> showManageSubscriptionsIOS() = 0;
      virtual std::shared_ptr<Promise<bool>> isEligibleForIntroOfferIOS(const std::string& groupID) = 0;
      virtual std::shared_ptr<Promise<std::string>> getReceiptDataIOS() = 0;
      virtual std::shared_ptr<Promise<bool>> isTransactionVerifiedIOS(const std::string& sku) = 0;
      virtual std::shared_ptr<Promise<std::optional<std::string>>> getTransactionJwsIOS(const std::string& sku) = 0;
      virtual std::shared_ptr<Promise<std::variant<NitroReceiptValidationResultIOS, NitroReceiptValidationResultAndroid>>> validateReceipt(const NitroReceiptValidationParams& params) = 0;
      virtual std::shared_ptr<Promise<std::string>> getStorefrontAndroid() = 0;
      virtual std::shared_ptr<Promise<void>> deepLinkToSubscriptionsAndroid(const NitroDeepLinkOptionsAndroid& options) = 0;

    protected:
      // Hybrid Setup
      void loadHybridMethods() override;

    protected:
      // Tag for logging
      static constexpr auto TAG = "RnIap";
  };

} // namespace margelo::nitro::iap
