///
/// NitroAvailablePurchasesOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `NitroAvailablePurchasesIosOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroAvailablePurchasesIosOptions; }
// Forward declaration of `NitroAvailablePurchasesAndroidOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroAvailablePurchasesAndroidOptions; }

#include "NitroAvailablePurchasesIosOptions.hpp"
#include <optional>
#include "NitroAvailablePurchasesAndroidOptions.hpp"

namespace margelo::nitro::iap {

  /**
   * A struct which can be represented as a JavaScript object (NitroAvailablePurchasesOptions).
   */
  struct NitroAvailablePurchasesOptions {
  public:
    std::optional<NitroAvailablePurchasesIosOptions> ios     SWIFT_PRIVATE;
    std::optional<NitroAvailablePurchasesAndroidOptions> android     SWIFT_PRIVATE;

  public:
    NitroAvailablePurchasesOptions() = default;
    explicit NitroAvailablePurchasesOptions(std::optional<NitroAvailablePurchasesIosOptions> ios, std::optional<NitroAvailablePurchasesAndroidOptions> android): ios(ios), android(android) {}
  };

} // namespace margelo::nitro::iap

namespace margelo::nitro {

  // C++ NitroAvailablePurchasesOptions <> JS NitroAvailablePurchasesOptions (object)
  template <>
  struct JSIConverter<margelo::nitro::iap::NitroAvailablePurchasesOptions> final {
    static inline margelo::nitro::iap::NitroAvailablePurchasesOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::iap::NitroAvailablePurchasesOptions(
        JSIConverter<std::optional<margelo::nitro::iap::NitroAvailablePurchasesIosOptions>>::fromJSI(runtime, obj.getProperty(runtime, "ios")),
        JSIConverter<std::optional<margelo::nitro::iap::NitroAvailablePurchasesAndroidOptions>>::fromJSI(runtime, obj.getProperty(runtime, "android"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::iap::NitroAvailablePurchasesOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "ios", JSIConverter<std::optional<margelo::nitro::iap::NitroAvailablePurchasesIosOptions>>::toJSI(runtime, arg.ios));
      obj.setProperty(runtime, "android", JSIConverter<std::optional<margelo::nitro::iap::NitroAvailablePurchasesAndroidOptions>>::toJSI(runtime, arg.android));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<margelo::nitro::iap::NitroAvailablePurchasesIosOptions>>::canConvert(runtime, obj.getProperty(runtime, "ios"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::iap::NitroAvailablePurchasesAndroidOptions>>::canConvert(runtime, obj.getProperty(runtime, "android"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
