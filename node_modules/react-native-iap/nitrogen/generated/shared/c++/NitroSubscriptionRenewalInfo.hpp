///
/// NitroSubscriptionRenewalInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::iap {

  /**
   * A struct which can be represented as a JavaScript object (NitroSubscriptionRenewalInfo).
   */
  struct NitroSubscriptionRenewalInfo {
  public:
    bool autoRenewStatus     SWIFT_PRIVATE;
    std::optional<std::string> autoRenewPreference     SWIFT_PRIVATE;
    std::optional<double> expirationReason     SWIFT_PRIVATE;
    std::optional<double> gracePeriodExpirationDate     SWIFT_PRIVATE;
    std::optional<std::string> currentProductID     SWIFT_PRIVATE;
    std::string platform     SWIFT_PRIVATE;

  public:
    NitroSubscriptionRenewalInfo() = default;
    explicit NitroSubscriptionRenewalInfo(bool autoRenewStatus, std::optional<std::string> autoRenewPreference, std::optional<double> expirationReason, std::optional<double> gracePeriodExpirationDate, std::optional<std::string> currentProductID, std::string platform): autoRenewStatus(autoRenewStatus), autoRenewPreference(autoRenewPreference), expirationReason(expirationReason), gracePeriodExpirationDate(gracePeriodExpirationDate), currentProductID(currentProductID), platform(platform) {}
  };

} // namespace margelo::nitro::iap

namespace margelo::nitro {

  // C++ NitroSubscriptionRenewalInfo <> JS NitroSubscriptionRenewalInfo (object)
  template <>
  struct JSIConverter<margelo::nitro::iap::NitroSubscriptionRenewalInfo> final {
    static inline margelo::nitro::iap::NitroSubscriptionRenewalInfo fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::iap::NitroSubscriptionRenewalInfo(
        JSIConverter<bool>::fromJSI(runtime, obj.getProperty(runtime, "autoRenewStatus")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "autoRenewPreference")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "expirationReason")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "gracePeriodExpirationDate")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "currentProductID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "platform"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::iap::NitroSubscriptionRenewalInfo& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "autoRenewStatus", JSIConverter<bool>::toJSI(runtime, arg.autoRenewStatus));
      obj.setProperty(runtime, "autoRenewPreference", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.autoRenewPreference));
      obj.setProperty(runtime, "expirationReason", JSIConverter<std::optional<double>>::toJSI(runtime, arg.expirationReason));
      obj.setProperty(runtime, "gracePeriodExpirationDate", JSIConverter<std::optional<double>>::toJSI(runtime, arg.gracePeriodExpirationDate));
      obj.setProperty(runtime, "currentProductID", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.currentProductID));
      obj.setProperty(runtime, "platform", JSIConverter<std::string>::toJSI(runtime, arg.platform));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<bool>::canConvert(runtime, obj.getProperty(runtime, "autoRenewStatus"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "autoRenewPreference"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "expirationReason"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "gracePeriodExpirationDate"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "currentProductID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "platform"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
