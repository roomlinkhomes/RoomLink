///
/// NitroReceiptValidationAndroidOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>
#include <optional>

namespace margelo::nitro::iap {

  /**
   * A struct which can be represented as a JavaScript object (NitroReceiptValidationAndroidOptions).
   */
  struct NitroReceiptValidationAndroidOptions {
  public:
    std::string packageName     SWIFT_PRIVATE;
    std::string productToken     SWIFT_PRIVATE;
    std::string accessToken     SWIFT_PRIVATE;
    std::optional<bool> isSub     SWIFT_PRIVATE;

  public:
    NitroReceiptValidationAndroidOptions() = default;
    explicit NitroReceiptValidationAndroidOptions(std::string packageName, std::string productToken, std::string accessToken, std::optional<bool> isSub): packageName(packageName), productToken(productToken), accessToken(accessToken), isSub(isSub) {}
  };

} // namespace margelo::nitro::iap

namespace margelo::nitro {

  // C++ NitroReceiptValidationAndroidOptions <> JS NitroReceiptValidationAndroidOptions (object)
  template <>
  struct JSIConverter<margelo::nitro::iap::NitroReceiptValidationAndroidOptions> final {
    static inline margelo::nitro::iap::NitroReceiptValidationAndroidOptions fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::iap::NitroReceiptValidationAndroidOptions(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "packageName")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "productToken")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "accessToken")),
        JSIConverter<std::optional<bool>>::fromJSI(runtime, obj.getProperty(runtime, "isSub"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::iap::NitroReceiptValidationAndroidOptions& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "packageName", JSIConverter<std::string>::toJSI(runtime, arg.packageName));
      obj.setProperty(runtime, "productToken", JSIConverter<std::string>::toJSI(runtime, arg.productToken));
      obj.setProperty(runtime, "accessToken", JSIConverter<std::string>::toJSI(runtime, arg.accessToken));
      obj.setProperty(runtime, "isSub", JSIConverter<std::optional<bool>>::toJSI(runtime, arg.isSub));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "packageName"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "productToken"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "accessToken"))) return false;
      if (!JSIConverter<std::optional<bool>>::canConvert(runtime, obj.getProperty(runtime, "isSub"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
