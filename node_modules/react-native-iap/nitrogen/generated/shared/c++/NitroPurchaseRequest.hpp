///
/// NitroPurchaseRequest.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `NitroRequestPurchaseIos` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroRequestPurchaseIos; }
// Forward declaration of `NitroRequestPurchaseAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroRequestPurchaseAndroid; }

#include "NitroRequestPurchaseIos.hpp"
#include <optional>
#include "NitroRequestPurchaseAndroid.hpp"

namespace margelo::nitro::iap {

  /**
   * A struct which can be represented as a JavaScript object (NitroPurchaseRequest).
   */
  struct NitroPurchaseRequest {
  public:
    std::optional<NitroRequestPurchaseIos> ios     SWIFT_PRIVATE;
    std::optional<NitroRequestPurchaseAndroid> android     SWIFT_PRIVATE;

  public:
    NitroPurchaseRequest() = default;
    explicit NitroPurchaseRequest(std::optional<NitroRequestPurchaseIos> ios, std::optional<NitroRequestPurchaseAndroid> android): ios(ios), android(android) {}
  };

} // namespace margelo::nitro::iap

namespace margelo::nitro {

  // C++ NitroPurchaseRequest <> JS NitroPurchaseRequest (object)
  template <>
  struct JSIConverter<margelo::nitro::iap::NitroPurchaseRequest> final {
    static inline margelo::nitro::iap::NitroPurchaseRequest fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::iap::NitroPurchaseRequest(
        JSIConverter<std::optional<margelo::nitro::iap::NitroRequestPurchaseIos>>::fromJSI(runtime, obj.getProperty(runtime, "ios")),
        JSIConverter<std::optional<margelo::nitro::iap::NitroRequestPurchaseAndroid>>::fromJSI(runtime, obj.getProperty(runtime, "android"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::iap::NitroPurchaseRequest& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "ios", JSIConverter<std::optional<margelo::nitro::iap::NitroRequestPurchaseIos>>::toJSI(runtime, arg.ios));
      obj.setProperty(runtime, "android", JSIConverter<std::optional<margelo::nitro::iap::NitroRequestPurchaseAndroid>>::toJSI(runtime, arg.android));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<margelo::nitro::iap::NitroRequestPurchaseIos>>::canConvert(runtime, obj.getProperty(runtime, "ios"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::iap::NitroRequestPurchaseAndroid>>::canConvert(runtime, obj.getProperty(runtime, "android"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
