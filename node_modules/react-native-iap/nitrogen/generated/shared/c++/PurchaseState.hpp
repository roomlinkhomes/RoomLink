///
/// PurchaseState.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::iap {

  /**
   * An enum which can be represented as a JavaScript union (PurchaseState).
   */
  enum class PurchaseState {
    DEFERRED      SWIFT_NAME(deferred) = 0,
    FAILED      SWIFT_NAME(failed) = 1,
    PENDING      SWIFT_NAME(pending) = 2,
    PURCHASED      SWIFT_NAME(purchased) = 3,
    RESTORED      SWIFT_NAME(restored) = 4,
    UNKNOWN      SWIFT_NAME(unknown) = 5,
  } CLOSED_ENUM;

} // namespace margelo::nitro::iap

namespace margelo::nitro {

  // C++ PurchaseState <> JS PurchaseState (union)
  template <>
  struct JSIConverter<margelo::nitro::iap::PurchaseState> final {
    static inline margelo::nitro::iap::PurchaseState fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("deferred"): return margelo::nitro::iap::PurchaseState::DEFERRED;
        case hashString("failed"): return margelo::nitro::iap::PurchaseState::FAILED;
        case hashString("pending"): return margelo::nitro::iap::PurchaseState::PENDING;
        case hashString("purchased"): return margelo::nitro::iap::PurchaseState::PURCHASED;
        case hashString("restored"): return margelo::nitro::iap::PurchaseState::RESTORED;
        case hashString("unknown"): return margelo::nitro::iap::PurchaseState::UNKNOWN;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum PurchaseState - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, margelo::nitro::iap::PurchaseState arg) {
      switch (arg) {
        case margelo::nitro::iap::PurchaseState::DEFERRED: return JSIConverter<std::string>::toJSI(runtime, "deferred");
        case margelo::nitro::iap::PurchaseState::FAILED: return JSIConverter<std::string>::toJSI(runtime, "failed");
        case margelo::nitro::iap::PurchaseState::PENDING: return JSIConverter<std::string>::toJSI(runtime, "pending");
        case margelo::nitro::iap::PurchaseState::PURCHASED: return JSIConverter<std::string>::toJSI(runtime, "purchased");
        case margelo::nitro::iap::PurchaseState::RESTORED: return JSIConverter<std::string>::toJSI(runtime, "restored");
        case margelo::nitro::iap::PurchaseState::UNKNOWN: return JSIConverter<std::string>::toJSI(runtime, "unknown");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert PurchaseState to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("deferred"):
        case hashString("failed"):
        case hashString("pending"):
        case hashString("purchased"):
        case hashString("restored"):
        case hashString("unknown"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
