///
/// NitroIap-Swift-Cxx-Bridge.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "NitroIap-Swift-Cxx-Bridge.hpp"

// Include C++ implementation defined types
#include "HybridRnIapSpecSwift.hpp"
#include "NitroIap-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::iap::bridge::swift {

  // pragma MARK: std::function<void(bool /* result */)>
  Func_void_bool create_Func_void_bool(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_bool::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](bool result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__exception_ptr::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::exception_ptr& error) mutable -> void {
      swiftClosure.call(error);
    };
  }
  
  // pragma MARK: std::function<void(const std::vector<NitroProduct>& /* result */)>
  Func_void_std__vector_NitroProduct_ create_Func_void_std__vector_NitroProduct_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__vector_NitroProduct_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::vector<NitroProduct>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const RequestPurchaseResult& /* result */)>
  Func_void_RequestPurchaseResult create_Func_void_RequestPurchaseResult(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_RequestPurchaseResult::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const RequestPurchaseResult& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::vector<NitroPurchase>& /* result */)>
  Func_void_std__vector_NitroPurchase_ create_Func_void_std__vector_NitroPurchase_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__vector_NitroPurchase_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::vector<NitroPurchase>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::variant<bool, NitroPurchaseResult>& /* result */)>
  Func_void_std__variant_bool__NitroPurchaseResult_ create_Func_void_std__variant_bool__NitroPurchaseResult_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__variant_bool__NitroPurchaseResult_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::variant<bool, NitroPurchaseResult>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const NitroPurchase& /* purchase */)>
  Func_void_NitroPurchase create_Func_void_NitroPurchase(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_NitroPurchase::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const NitroPurchase& purchase) mutable -> void {
      swiftClosure.call(purchase);
    };
  }
  
  // pragma MARK: std::function<void(const NitroPurchaseResult& /* error */)>
  Func_void_NitroPurchaseResult create_Func_void_NitroPurchaseResult(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_NitroPurchaseResult::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const NitroPurchaseResult& error) mutable -> void {
      swiftClosure.call(error);
    };
  }
  
  // pragma MARK: std::function<void(const NitroProduct& /* product */)>
  Func_void_NitroProduct create_Func_void_NitroProduct(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_NitroProduct::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const NitroProduct& product) mutable -> void {
      swiftClosure.call(product);
    };
  }
  
  // pragma MARK: std::function<void(const std::string& /* result */)>
  Func_void_std__string create_Func_void_std__string(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__string::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::string& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::optional<std::string>& /* result */)>
  Func_void_std__optional_std__string_ create_Func_void_std__optional_std__string_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__optional_std__string_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::optional<std::string>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::optional<NitroProduct>& /* result */)>
  Func_void_std__optional_NitroProduct_ create_Func_void_std__optional_NitroProduct_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__optional_NitroProduct_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::optional<NitroProduct>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void()>
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)]() mutable -> void {
      swiftClosure.call();
    };
  }
  
  // pragma MARK: std::function<void(const std::optional<std::vector<NitroSubscriptionStatus>>& /* result */)>
  Func_void_std__optional_std__vector_NitroSubscriptionStatus__ create_Func_void_std__optional_std__vector_NitroSubscriptionStatus__(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__optional_std__vector_NitroSubscriptionStatus__::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::optional<std::vector<NitroSubscriptionStatus>>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::optional<NitroPurchase>& /* result */)>
  Func_void_std__optional_NitroPurchase_ create_Func_void_std__optional_NitroPurchase_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__optional_NitroPurchase_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::optional<NitroPurchase>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::function<void(const std::variant<NitroReceiptValidationResultIOS, NitroReceiptValidationResultAndroid>& /* result */)>
  Func_void_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid_ create_Func_void_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid_(void* _Nonnull swiftClosureWrapper) noexcept {
    auto swiftClosure = NitroIap::Func_void_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid_::fromUnsafe(swiftClosureWrapper);
    return [swiftClosure = std::move(swiftClosure)](const std::variant<NitroReceiptValidationResultIOS, NitroReceiptValidationResultAndroid>& result) mutable -> void {
      swiftClosure.call(result);
    };
  }
  
  // pragma MARK: std::shared_ptr<HybridRnIapSpec>
  std::shared_ptr<HybridRnIapSpec> create_std__shared_ptr_HybridRnIapSpec_(void* _Nonnull swiftUnsafePointer) noexcept {
    NitroIap::HybridRnIapSpec_cxx swiftPart = NitroIap::HybridRnIapSpec_cxx::fromUnsafe(swiftUnsafePointer);
    return std::make_shared<margelo::nitro::iap::HybridRnIapSpecSwift>(swiftPart);
  }
  void* _Nonnull get_std__shared_ptr_HybridRnIapSpec_(std__shared_ptr_HybridRnIapSpec_ cppType) noexcept {
    std::shared_ptr<margelo::nitro::iap::HybridRnIapSpecSwift> swiftWrapper = std::dynamic_pointer_cast<margelo::nitro::iap::HybridRnIapSpecSwift>(cppType);
    #ifdef NITRO_DEBUG
    if (swiftWrapper == nullptr) [[unlikely]] {
      throw std::runtime_error("Class \"HybridRnIapSpec\" is not implemented in Swift!");
    }
    #endif
    NitroIap::HybridRnIapSpec_cxx& swiftPart = swiftWrapper->getSwiftPart();
    return swiftPart.toUnsafe();
  }

} // namespace margelo::nitro::iap::bridge::swift
