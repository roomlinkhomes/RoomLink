///
/// HybridRnIapSpecSwift.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include "HybridRnIapSpec.hpp"

// Forward declaration of `HybridRnIapSpec_cxx` to properly resolve imports.
namespace NitroIap { class HybridRnIapSpec_cxx; }

// Forward declaration of `NitroProduct` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroProduct; }
// Forward declaration of `RequestPurchaseResult` to properly resolve imports.
namespace margelo::nitro::iap { struct RequestPurchaseResult; }
// Forward declaration of `PurchaseAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct PurchaseAndroid; }
// Forward declaration of `PurchaseIOS` to properly resolve imports.
namespace margelo::nitro::iap { struct PurchaseIOS; }
// Forward declaration of `IapPlatform` to properly resolve imports.
namespace margelo::nitro::iap { enum class IapPlatform; }
// Forward declaration of `PurchaseState` to properly resolve imports.
namespace margelo::nitro::iap { enum class PurchaseState; }
// Forward declaration of `PurchaseOfferIOS` to properly resolve imports.
namespace margelo::nitro::iap { struct PurchaseOfferIOS; }
// Forward declaration of `NitroPurchaseRequest` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroPurchaseRequest; }
// Forward declaration of `NitroRequestPurchaseIos` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroRequestPurchaseIos; }
// Forward declaration of `NitroRequestPurchaseAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroRequestPurchaseAndroid; }
// Forward declaration of `NitroSubscriptionOffer` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroSubscriptionOffer; }
// Forward declaration of `NitroPurchase` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroPurchase; }
// Forward declaration of `NitroAvailablePurchasesOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroAvailablePurchasesOptions; }
// Forward declaration of `NitroAvailablePurchasesIosOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroAvailablePurchasesIosOptions; }
// Forward declaration of `NitroAvailablePurchasesAndroidOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroAvailablePurchasesAndroidOptions; }
// Forward declaration of `NitroPurchaseResult` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroPurchaseResult; }
// Forward declaration of `NitroFinishTransactionParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroFinishTransactionParams; }
// Forward declaration of `NitroFinishTransactionIosParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroFinishTransactionIosParams; }
// Forward declaration of `NitroFinishTransactionAndroidParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroFinishTransactionAndroidParams; }
// Forward declaration of `NitroSubscriptionStatus` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroSubscriptionStatus; }
// Forward declaration of `NitroSubscriptionRenewalInfo` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroSubscriptionRenewalInfo; }
// Forward declaration of `NitroReceiptValidationResultIOS` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationResultIOS; }
// Forward declaration of `NitroReceiptValidationResultAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationResultAndroid; }
// Forward declaration of `NitroReceiptValidationParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationParams; }
// Forward declaration of `NitroReceiptValidationAndroidOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationAndroidOptions; }
// Forward declaration of `NitroDeepLinkOptionsAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroDeepLinkOptionsAndroid; }

#include <NitroModules/Promise.hpp>
#include "NitroProduct.hpp"
#include <vector>
#include <string>
#include <optional>
#include "RequestPurchaseResult.hpp"
#include "PurchaseAndroid.hpp"
#include "PurchaseIOS.hpp"
#include <variant>
#include "IapPlatform.hpp"
#include "PurchaseState.hpp"
#include "PurchaseOfferIOS.hpp"
#include "NitroPurchaseRequest.hpp"
#include "NitroRequestPurchaseIos.hpp"
#include <unordered_map>
#include "NitroRequestPurchaseAndroid.hpp"
#include "NitroSubscriptionOffer.hpp"
#include "NitroPurchase.hpp"
#include "NitroAvailablePurchasesOptions.hpp"
#include "NitroAvailablePurchasesIosOptions.hpp"
#include "NitroAvailablePurchasesAndroidOptions.hpp"
#include "NitroPurchaseResult.hpp"
#include "NitroFinishTransactionParams.hpp"
#include "NitroFinishTransactionIosParams.hpp"
#include "NitroFinishTransactionAndroidParams.hpp"
#include <functional>
#include "NitroSubscriptionStatus.hpp"
#include "NitroSubscriptionRenewalInfo.hpp"
#include "NitroReceiptValidationResultIOS.hpp"
#include "NitroReceiptValidationResultAndroid.hpp"
#include "NitroReceiptValidationParams.hpp"
#include "NitroReceiptValidationAndroidOptions.hpp"
#include "NitroDeepLinkOptionsAndroid.hpp"

#include "NitroIap-Swift-Cxx-Umbrella.hpp"

namespace margelo::nitro::iap {

  /**
   * The C++ part of HybridRnIapSpec_cxx.swift.
   *
   * HybridRnIapSpecSwift (C++) accesses HybridRnIapSpec_cxx (Swift), and might
   * contain some additional bridging code for C++ <> Swift interop.
   *
   * Since this obviously introduces an overhead, I hope at some point in
   * the future, HybridRnIapSpec_cxx can directly inherit from the C++ class HybridRnIapSpec
   * to simplify the whole structure and memory management.
   */
  class HybridRnIapSpecSwift: public virtual HybridRnIapSpec {
  public:
    // Constructor from a Swift instance
    explicit HybridRnIapSpecSwift(const NitroIap::HybridRnIapSpec_cxx& swiftPart):
      HybridObject(HybridRnIapSpec::TAG),
      _swiftPart(swiftPart) { }

  public:
    // Get the Swift part
    inline NitroIap::HybridRnIapSpec_cxx& getSwiftPart() noexcept {
      return _swiftPart;
    }

  public:
    inline size_t getExternalMemorySize() noexcept override {
      return _swiftPart.getMemorySize();
    }
    void dispose() noexcept override {
      _swiftPart.dispose();
    }

  public:
    // Properties
    

  public:
    // Methods
    inline std::shared_ptr<Promise<bool>> initConnection() override {
      auto __result = _swiftPart.initConnection();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> endConnection() override {
      auto __result = _swiftPart.endConnection();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<NitroProduct>>> fetchProducts(const std::vector<std::string>& skus, const std::string& type) override {
      auto __result = _swiftPart.fetchProducts(skus, type);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<RequestPurchaseResult>> requestPurchase(const NitroPurchaseRequest& request) override {
      auto __result = _swiftPart.requestPurchase(request);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<NitroPurchase>>> getAvailablePurchases(const std::optional<NitroAvailablePurchasesOptions>& options) override {
      auto __result = _swiftPart.getAvailablePurchases(options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::variant<bool, NitroPurchaseResult>>> finishTransaction(const NitroFinishTransactionParams& params) override {
      auto __result = _swiftPart.finishTransaction(params);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline void addPurchaseUpdatedListener(const std::function<void(const NitroPurchase& /* purchase */)>& listener) override {
      auto __result = _swiftPart.addPurchaseUpdatedListener(listener);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void addPurchaseErrorListener(const std::function<void(const NitroPurchaseResult& /* error */)>& listener) override {
      auto __result = _swiftPart.addPurchaseErrorListener(listener);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void removePurchaseUpdatedListener(const std::function<void(const NitroPurchase& /* purchase */)>& listener) override {
      auto __result = _swiftPart.removePurchaseUpdatedListener(listener);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void removePurchaseErrorListener(const std::function<void(const NitroPurchaseResult& /* error */)>& listener) override {
      auto __result = _swiftPart.removePurchaseErrorListener(listener);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void addPromotedProductListenerIOS(const std::function<void(const NitroProduct& /* product */)>& listener) override {
      auto __result = _swiftPart.addPromotedProductListenerIOS(listener);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline void removePromotedProductListenerIOS(const std::function<void(const NitroProduct& /* product */)>& listener) override {
      auto __result = _swiftPart.removePromotedProductListenerIOS(listener);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
    }
    inline std::shared_ptr<Promise<std::string>> getStorefrontIOS() override {
      auto __result = _swiftPart.getStorefrontIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<std::string>>> getAppTransactionIOS() override {
      auto __result = _swiftPart.getAppTransactionIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<NitroProduct>>> requestPromotedProductIOS() override {
      auto __result = _swiftPart.requestPromotedProductIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> buyPromotedProductIOS() override {
      auto __result = _swiftPart.buyPromotedProductIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> presentCodeRedemptionSheetIOS() override {
      auto __result = _swiftPart.presentCodeRedemptionSheetIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> clearTransactionIOS() override {
      auto __result = _swiftPart.clearTransactionIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<std::string>>> beginRefundRequestIOS(const std::string& sku) override {
      auto __result = _swiftPart.beginRefundRequestIOS(sku);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<std::vector<NitroSubscriptionStatus>>>> subscriptionStatusIOS(const std::string& sku) override {
      auto __result = _swiftPart.subscriptionStatusIOS(sku);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<NitroPurchase>>> currentEntitlementIOS(const std::string& sku) override {
      auto __result = _swiftPart.currentEntitlementIOS(sku);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<NitroPurchase>>> latestTransactionIOS(const std::string& sku) override {
      auto __result = _swiftPart.latestTransactionIOS(sku);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<NitroPurchase>>> getPendingTransactionsIOS() override {
      auto __result = _swiftPart.getPendingTransactionsIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> syncIOS() override {
      auto __result = _swiftPart.syncIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::vector<NitroPurchase>>> showManageSubscriptionsIOS() override {
      auto __result = _swiftPart.showManageSubscriptionsIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> isEligibleForIntroOfferIOS(const std::string& groupID) override {
      auto __result = _swiftPart.isEligibleForIntroOfferIOS(groupID);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> getReceiptDataIOS() override {
      auto __result = _swiftPart.getReceiptDataIOS();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<bool>> isTransactionVerifiedIOS(const std::string& sku) override {
      auto __result = _swiftPart.isTransactionVerifiedIOS(sku);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::optional<std::string>>> getTransactionJwsIOS(const std::string& sku) override {
      auto __result = _swiftPart.getTransactionJwsIOS(sku);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::variant<NitroReceiptValidationResultIOS, NitroReceiptValidationResultAndroid>>> validateReceipt(const NitroReceiptValidationParams& params) override {
      auto __result = _swiftPart.validateReceipt(params);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<std::string>> getStorefrontAndroid() override {
      auto __result = _swiftPart.getStorefrontAndroid();
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }
    inline std::shared_ptr<Promise<void>> deepLinkToSubscriptionsAndroid(const NitroDeepLinkOptionsAndroid& options) override {
      auto __result = _swiftPart.deepLinkToSubscriptionsAndroid(options);
      if (__result.hasError()) [[unlikely]] {
        std::rethrow_exception(__result.error());
      }
      auto __value = std::move(__result.value());
      return __value;
    }

  private:
    NitroIap::HybridRnIapSpec_cxx _swiftPart;
  };

} // namespace margelo::nitro::iap
