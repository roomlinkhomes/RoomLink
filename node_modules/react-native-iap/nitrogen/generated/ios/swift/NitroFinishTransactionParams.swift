///
/// NitroFinishTransactionParams.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroFinishTransactionParams`, backed by a C++ struct.
 */
public typealias NitroFinishTransactionParams = margelo.nitro.iap.NitroFinishTransactionParams

public extension NitroFinishTransactionParams {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `NitroFinishTransactionParams`.
   */
  init(ios: NitroFinishTransactionIosParams?, android: NitroFinishTransactionAndroidParams?) {
    self.init({ () -> bridge.std__optional_NitroFinishTransactionIosParams_ in
      if let __unwrappedValue = ios {
        return bridge.create_std__optional_NitroFinishTransactionIosParams_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_NitroFinishTransactionAndroidParams_ in
      if let __unwrappedValue = android {
        return bridge.create_std__optional_NitroFinishTransactionAndroidParams_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var ios: NitroFinishTransactionIosParams? {
    @inline(__always)
    get {
      return { () -> NitroFinishTransactionIosParams? in
        if bridge.has_value_std__optional_NitroFinishTransactionIosParams_(self.__ios) {
          let __unwrapped = bridge.get_std__optional_NitroFinishTransactionIosParams_(self.__ios)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__ios = { () -> bridge.std__optional_NitroFinishTransactionIosParams_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroFinishTransactionIosParams_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var android: NitroFinishTransactionAndroidParams? {
    @inline(__always)
    get {
      return { () -> NitroFinishTransactionAndroidParams? in
        if bridge.has_value_std__optional_NitroFinishTransactionAndroidParams_(self.__android) {
          let __unwrapped = bridge.get_std__optional_NitroFinishTransactionAndroidParams_(self.__android)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__android = { () -> bridge.std__optional_NitroFinishTransactionAndroidParams_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroFinishTransactionAndroidParams_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
