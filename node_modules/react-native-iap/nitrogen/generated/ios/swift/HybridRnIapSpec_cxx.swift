///
/// HybridRnIapSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/**
 * A class implementation that bridges HybridRnIapSpec over to C++.
 * In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
 *
 * Also, some Swift types need to be bridged with special handling:
 * - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
 * - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
 * - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
 */
open class HybridRnIapSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::iap::bridge::swift`)
   * from `NitroIap-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Holds an instance of the `HybridRnIapSpec` Swift protocol.
   */
  private var __implementation: any HybridRnIapSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_HybridRnIapSpec_

  /**
   * Create a new `HybridRnIapSpec_cxx` that wraps the given `HybridRnIapSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridRnIapSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridRnIapSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridRnIapSpec() -> any HybridRnIapSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridRnIapSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridRnIapSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridRnIapSpec_cxx {
    return Unmanaged<HybridRnIapSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<HybridRnIapSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_HybridRnIapSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_HybridRnIapSpec_(self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_HybridRnIapSpec_(newCxxPart)
      return newCxxPart
    }
  }

  

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  /**
   * Call dispose() on the Swift class.
   * This _may_ be called manually from JS.
   */
  @inline(__always)
  public func dispose() {
    self.__implementation.dispose()
  }

  // Properties
  

  // Methods
  @inline(__always)
  public final func initConnection() -> bridge.Result_std__shared_ptr_Promise_bool___ {
    do {
      let __result = try self.__implementation.initConnection()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_bool__ in
        let __promise = bridge.create_std__shared_ptr_Promise_bool__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_bool__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func endConnection() -> bridge.Result_std__shared_ptr_Promise_bool___ {
    do {
      let __result = try self.__implementation.endConnection()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_bool__ in
        let __promise = bridge.create_std__shared_ptr_Promise_bool__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_bool__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func fetchProducts(skus: bridge.std__vector_std__string_, type: std.string) -> bridge.Result_std__shared_ptr_Promise_std__vector_NitroProduct____ {
    do {
      let __result = try self.__implementation.fetchProducts(skus: skus.map({ __item in String(__item) }), type: String(type))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_NitroProduct___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_NitroProduct___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_NitroProduct___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__vector_NitroProduct_ in
              var __vector = bridge.create_std__vector_NitroProduct_(__result.count)
              for __item in __result {
                __vector.push_back(__item)
              }
              return __vector
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_NitroProduct____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_NitroProduct____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func requestPurchase(request: NitroPurchaseRequest) -> bridge.Result_std__shared_ptr_Promise_RequestPurchaseResult___ {
    do {
      let __result = try self.__implementation.requestPurchase(request: request)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_RequestPurchaseResult__ in
        let __promise = bridge.create_std__shared_ptr_Promise_RequestPurchaseResult__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_RequestPurchaseResult__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_RequestPurchaseResult___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_RequestPurchaseResult___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getAvailablePurchases(options: bridge.std__optional_NitroAvailablePurchasesOptions_) -> bridge.Result_std__shared_ptr_Promise_std__vector_NitroPurchase____ {
    do {
      let __result = try self.__implementation.getAvailablePurchases(options: { () -> NitroAvailablePurchasesOptions? in
        if bridge.has_value_std__optional_NitroAvailablePurchasesOptions_(options) {
          let __unwrapped = bridge.get_std__optional_NitroAvailablePurchasesOptions_(options)
          return __unwrapped
        } else {
          return nil
        }
      }())
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_NitroPurchase___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_NitroPurchase___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_NitroPurchase___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__vector_NitroPurchase_ in
              var __vector = bridge.create_std__vector_NitroPurchase_(__result.count)
              for __item in __result {
                __vector.push_back(__item)
              }
              return __vector
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_NitroPurchase____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_NitroPurchase____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func finishTransaction(params: NitroFinishTransactionParams) -> bridge.Result_std__shared_ptr_Promise_std__variant_bool__NitroPurchaseResult____ {
    do {
      let __result = try self.__implementation.finishTransaction(params: params)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__variant_bool__NitroPurchaseResult___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__variant_bool__NitroPurchaseResult___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__variant_bool__NitroPurchaseResult___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__variant_bool__NitroPurchaseResult_ in
              switch __result {
                case .first(let __value):
                  return bridge.create_std__variant_bool__NitroPurchaseResult_(__value)
                case .second(let __value):
                  return bridge.create_std__variant_bool__NitroPurchaseResult_(__value)
              }
            }().variant) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__variant_bool__NitroPurchaseResult____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__variant_bool__NitroPurchaseResult____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addPurchaseUpdatedListener(listener: bridge.Func_void_NitroPurchase) -> bridge.Result_void_ {
    do {
      try self.__implementation.addPurchaseUpdatedListener(listener: { () -> (NitroPurchase) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_NitroPurchase(listener)
        return { (__purchase: NitroPurchase) -> Void in
          __wrappedFunction.call(__purchase)
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addPurchaseErrorListener(listener: bridge.Func_void_NitroPurchaseResult) -> bridge.Result_void_ {
    do {
      try self.__implementation.addPurchaseErrorListener(listener: { () -> (NitroPurchaseResult) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_NitroPurchaseResult(listener)
        return { (__error: NitroPurchaseResult) -> Void in
          __wrappedFunction.call(__error)
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func removePurchaseUpdatedListener(listener: bridge.Func_void_NitroPurchase) -> bridge.Result_void_ {
    do {
      try self.__implementation.removePurchaseUpdatedListener(listener: { () -> (NitroPurchase) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_NitroPurchase(listener)
        return { (__purchase: NitroPurchase) -> Void in
          __wrappedFunction.call(__purchase)
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func removePurchaseErrorListener(listener: bridge.Func_void_NitroPurchaseResult) -> bridge.Result_void_ {
    do {
      try self.__implementation.removePurchaseErrorListener(listener: { () -> (NitroPurchaseResult) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_NitroPurchaseResult(listener)
        return { (__error: NitroPurchaseResult) -> Void in
          __wrappedFunction.call(__error)
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func addPromotedProductListenerIOS(listener: bridge.Func_void_NitroProduct) -> bridge.Result_void_ {
    do {
      try self.__implementation.addPromotedProductListenerIOS(listener: { () -> (NitroProduct) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_NitroProduct(listener)
        return { (__product: NitroProduct) -> Void in
          __wrappedFunction.call(__product)
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func removePromotedProductListenerIOS(listener: bridge.Func_void_NitroProduct) -> bridge.Result_void_ {
    do {
      try self.__implementation.removePromotedProductListenerIOS(listener: { () -> (NitroProduct) -> Void in
        let __wrappedFunction = bridge.wrap_Func_void_NitroProduct(listener)
        return { (__product: NitroProduct) -> Void in
          __wrappedFunction.call(__product)
        }
      }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getStorefrontIOS() -> bridge.Result_std__shared_ptr_Promise_std__string___ {
    do {
      let __result = try self.__implementation.getStorefrontIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__string__ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__string__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__string__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(std.string(__result)) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getAppTransactionIOS() -> bridge.Result_std__shared_ptr_Promise_std__optional_std__string____ {
    do {
      let __result = try self.__implementation.getAppTransactionIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__optional_std__string___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__optional_std__string___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__optional_std__string___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_std__string_ in
              if let __unwrappedValue = __result {
                return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
              } else {
                return .init()
              }
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__string____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__string____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func requestPromotedProductIOS() -> bridge.Result_std__shared_ptr_Promise_std__optional_NitroProduct____ {
    do {
      let __result = try self.__implementation.requestPromotedProductIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__optional_NitroProduct___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__optional_NitroProduct___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__optional_NitroProduct___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_NitroProduct_ in
              if let __unwrappedValue = __result {
                return bridge.create_std__optional_NitroProduct_(__unwrappedValue)
              } else {
                return .init()
              }
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_NitroProduct____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_NitroProduct____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func buyPromotedProductIOS() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.buyPromotedProductIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func presentCodeRedemptionSheetIOS() -> bridge.Result_std__shared_ptr_Promise_bool___ {
    do {
      let __result = try self.__implementation.presentCodeRedemptionSheetIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_bool__ in
        let __promise = bridge.create_std__shared_ptr_Promise_bool__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_bool__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func clearTransactionIOS() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.clearTransactionIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func beginRefundRequestIOS(sku: std.string) -> bridge.Result_std__shared_ptr_Promise_std__optional_std__string____ {
    do {
      let __result = try self.__implementation.beginRefundRequestIOS(sku: String(sku))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__optional_std__string___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__optional_std__string___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__optional_std__string___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_std__string_ in
              if let __unwrappedValue = __result {
                return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
              } else {
                return .init()
              }
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__string____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__string____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func subscriptionStatusIOS(sku: std.string) -> bridge.Result_std__shared_ptr_Promise_std__optional_std__vector_NitroSubscriptionStatus_____ {
    do {
      let __result = try self.__implementation.subscriptionStatusIOS(sku: String(sku))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__optional_std__vector_NitroSubscriptionStatus____ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__optional_std__vector_NitroSubscriptionStatus____()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__optional_std__vector_NitroSubscriptionStatus____(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_std__vector_NitroSubscriptionStatus__ in
              if let __unwrappedValue = __result {
                return bridge.create_std__optional_std__vector_NitroSubscriptionStatus__({ () -> bridge.std__vector_NitroSubscriptionStatus_ in
                  var __vector = bridge.create_std__vector_NitroSubscriptionStatus_(__unwrappedValue.count)
                  for __item in __unwrappedValue {
                    __vector.push_back(__item)
                  }
                  return __vector
                }())
              } else {
                return .init()
              }
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__vector_NitroSubscriptionStatus_____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__vector_NitroSubscriptionStatus_____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func currentEntitlementIOS(sku: std.string) -> bridge.Result_std__shared_ptr_Promise_std__optional_NitroPurchase____ {
    do {
      let __result = try self.__implementation.currentEntitlementIOS(sku: String(sku))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__optional_NitroPurchase___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__optional_NitroPurchase___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__optional_NitroPurchase___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_NitroPurchase_ in
              if let __unwrappedValue = __result {
                return bridge.create_std__optional_NitroPurchase_(__unwrappedValue)
              } else {
                return .init()
              }
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_NitroPurchase____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_NitroPurchase____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func latestTransactionIOS(sku: std.string) -> bridge.Result_std__shared_ptr_Promise_std__optional_NitroPurchase____ {
    do {
      let __result = try self.__implementation.latestTransactionIOS(sku: String(sku))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__optional_NitroPurchase___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__optional_NitroPurchase___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__optional_NitroPurchase___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_NitroPurchase_ in
              if let __unwrappedValue = __result {
                return bridge.create_std__optional_NitroPurchase_(__unwrappedValue)
              } else {
                return .init()
              }
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_NitroPurchase____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_NitroPurchase____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getPendingTransactionsIOS() -> bridge.Result_std__shared_ptr_Promise_std__vector_NitroPurchase____ {
    do {
      let __result = try self.__implementation.getPendingTransactionsIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_NitroPurchase___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_NitroPurchase___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_NitroPurchase___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__vector_NitroPurchase_ in
              var __vector = bridge.create_std__vector_NitroPurchase_(__result.count)
              for __item in __result {
                __vector.push_back(__item)
              }
              return __vector
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_NitroPurchase____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_NitroPurchase____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func syncIOS() -> bridge.Result_std__shared_ptr_Promise_bool___ {
    do {
      let __result = try self.__implementation.syncIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_bool__ in
        let __promise = bridge.create_std__shared_ptr_Promise_bool__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_bool__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func showManageSubscriptionsIOS() -> bridge.Result_std__shared_ptr_Promise_std__vector_NitroPurchase____ {
    do {
      let __result = try self.__implementation.showManageSubscriptionsIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_NitroPurchase___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_NitroPurchase___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_NitroPurchase___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__vector_NitroPurchase_ in
              var __vector = bridge.create_std__vector_NitroPurchase_(__result.count)
              for __item in __result {
                __vector.push_back(__item)
              }
              return __vector
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_NitroPurchase____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_NitroPurchase____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func isEligibleForIntroOfferIOS(groupID: std.string) -> bridge.Result_std__shared_ptr_Promise_bool___ {
    do {
      let __result = try self.__implementation.isEligibleForIntroOfferIOS(groupID: String(groupID))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_bool__ in
        let __promise = bridge.create_std__shared_ptr_Promise_bool__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_bool__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getReceiptDataIOS() -> bridge.Result_std__shared_ptr_Promise_std__string___ {
    do {
      let __result = try self.__implementation.getReceiptDataIOS()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__string__ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__string__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__string__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(std.string(__result)) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func isTransactionVerifiedIOS(sku: std.string) -> bridge.Result_std__shared_ptr_Promise_bool___ {
    do {
      let __result = try self.__implementation.isTransactionVerifiedIOS(sku: String(sku))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_bool__ in
        let __promise = bridge.create_std__shared_ptr_Promise_bool__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_bool__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_bool___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getTransactionJwsIOS(sku: std.string) -> bridge.Result_std__shared_ptr_Promise_std__optional_std__string____ {
    do {
      let __result = try self.__implementation.getTransactionJwsIOS(sku: String(sku))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__optional_std__string___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__optional_std__string___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__optional_std__string___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__optional_std__string_ in
              if let __unwrappedValue = __result {
                return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
              } else {
                return .init()
              }
            }()) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__string____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__optional_std__string____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func validateReceipt(params: NitroReceiptValidationParams) -> bridge.Result_std__shared_ptr_Promise_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid____ {
    do {
      let __result = try self.__implementation.validateReceipt(params: params)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid___(__promise)
        __result
          .then({ __result in __promiseHolder.resolve({ () -> bridge.std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid_ in
              switch __result {
                case .first(let __value):
                  return bridge.create_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid_(__value)
                case .second(let __value):
                  return bridge.create_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid_(__value)
              }
            }().variant) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__variant_NitroReceiptValidationResultIOS__NitroReceiptValidationResultAndroid____(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func getStorefrontAndroid() -> bridge.Result_std__shared_ptr_Promise_std__string___ {
    do {
      let __result = try self.__implementation.getStorefrontAndroid()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__string__ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__string__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__string__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(std.string(__result)) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__exceptionPtr)
    }
  }
  
  @inline(__always)
  public final func deepLinkToSubscriptionsAndroid(options: NitroDeepLinkOptionsAndroid) -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.deepLinkToSubscriptionsAndroid(options: options)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }
}
