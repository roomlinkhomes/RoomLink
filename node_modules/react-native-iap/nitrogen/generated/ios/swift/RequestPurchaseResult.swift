///
/// RequestPurchaseResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `RequestPurchaseResult`, backed by a C++ struct.
 */
public typealias RequestPurchaseResult = margelo.nitro.iap.RequestPurchaseResult

public extension RequestPurchaseResult {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `RequestPurchaseResult`.
   */
  init(purchase: Variant_PurchaseAndroid_PurchaseIOS?, purchases: [Purchase]?) {
    self.init({ () -> bridge.std__optional_std__variant_PurchaseAndroid__PurchaseIOS__ in
      if let __unwrappedValue = purchase {
        return bridge.create_std__optional_std__variant_PurchaseAndroid__PurchaseIOS__({ () -> bridge.std__variant_PurchaseAndroid__PurchaseIOS_ in
          switch __unwrappedValue {
            case .first(let __value):
              return bridge.create_std__variant_PurchaseAndroid__PurchaseIOS_(__value)
            case .second(let __value):
              return bridge.create_std__variant_PurchaseAndroid__PurchaseIOS_(__value)
          }
        }().variant)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__vector_std__variant_PurchaseAndroid__PurchaseIOS___ in
      if let __unwrappedValue = purchases {
        return bridge.create_std__optional_std__vector_std__variant_PurchaseAndroid__PurchaseIOS___({ () -> bridge.std__vector_std__variant_PurchaseAndroid__PurchaseIOS__ in
          var __vector = bridge.create_std__vector_std__variant_PurchaseAndroid__PurchaseIOS__(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back({ () -> bridge.std__variant_PurchaseAndroid__PurchaseIOS_ in
              switch __item {
                case .first(let __value):
                  return bridge.create_std__variant_PurchaseAndroid__PurchaseIOS_(__value)
                case .second(let __value):
                  return bridge.create_std__variant_PurchaseAndroid__PurchaseIOS_(__value)
              }
            }().variant)
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }())
  }

  var purchase: Variant_PurchaseAndroid_PurchaseIOS? {
    @inline(__always)
    get {
      return { () -> Variant_PurchaseAndroid_PurchaseIOS? in
        if bridge.has_value_std__optional_std__variant_PurchaseAndroid__PurchaseIOS__(self.__purchase) {
          let __unwrapped = bridge.get_std__optional_std__variant_PurchaseAndroid__PurchaseIOS__(self.__purchase)
          return { () -> Variant_PurchaseAndroid_PurchaseIOS in
            let __variant = bridge.std__variant_PurchaseAndroid__PurchaseIOS_(__unwrapped)
            switch __variant.index() {
              case 0:
                let __actual = __variant.get_0()
                return .first(__actual)
              case 1:
                let __actual = __variant.get_1()
                return .second(__actual)
              default:
                fatalError("Variant can never have index \(__variant.index())!")
            }
          }()
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__purchase = { () -> bridge.std__optional_std__variant_PurchaseAndroid__PurchaseIOS__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__variant_PurchaseAndroid__PurchaseIOS__({ () -> bridge.std__variant_PurchaseAndroid__PurchaseIOS_ in
            switch __unwrappedValue {
              case .first(let __value):
                return bridge.create_std__variant_PurchaseAndroid__PurchaseIOS_(__value)
              case .second(let __value):
                return bridge.create_std__variant_PurchaseAndroid__PurchaseIOS_(__value)
            }
          }().variant)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var purchases: [Purchase]? {
    @inline(__always)
    get {
      return { () -> [Purchase]? in
        if bridge.has_value_std__optional_std__vector_std__variant_PurchaseAndroid__PurchaseIOS___(self.__purchases) {
          let __unwrapped = bridge.get_std__optional_std__vector_std__variant_PurchaseAndroid__PurchaseIOS___(self.__purchases)
          return __unwrapped.map({ __item in { () -> Purchase in
            let __variant = bridge.std__variant_PurchaseAndroid__PurchaseIOS_(__item)
            switch __variant.index() {
              case 0:
                let __actual = __variant.get_0()
                return .first(__actual)
              case 1:
                let __actual = __variant.get_1()
                return .second(__actual)
              default:
                fatalError("Variant can never have index \(__variant.index())!")
            }
          }() })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__purchases = { () -> bridge.std__optional_std__vector_std__variant_PurchaseAndroid__PurchaseIOS___ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_std__variant_PurchaseAndroid__PurchaseIOS___({ () -> bridge.std__vector_std__variant_PurchaseAndroid__PurchaseIOS__ in
            var __vector = bridge.create_std__vector_std__variant_PurchaseAndroid__PurchaseIOS__(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back({ () -> bridge.std__variant_PurchaseAndroid__PurchaseIOS_ in
                switch __item {
                  case .first(let __value):
                    return bridge.create_std__variant_PurchaseAndroid__PurchaseIOS_(__value)
                  case .second(let __value):
                    return bridge.create_std__variant_PurchaseAndroid__PurchaseIOS_(__value)
                }
              }().variant)
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
}
