///
/// NitroAvailablePurchasesOptions.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroAvailablePurchasesOptions`, backed by a C++ struct.
 */
public typealias NitroAvailablePurchasesOptions = margelo.nitro.iap.NitroAvailablePurchasesOptions

public extension NitroAvailablePurchasesOptions {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `NitroAvailablePurchasesOptions`.
   */
  init(ios: NitroAvailablePurchasesIosOptions?, android: NitroAvailablePurchasesAndroidOptions?) {
    self.init({ () -> bridge.std__optional_NitroAvailablePurchasesIosOptions_ in
      if let __unwrappedValue = ios {
        return bridge.create_std__optional_NitroAvailablePurchasesIosOptions_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_NitroAvailablePurchasesAndroidOptions_ in
      if let __unwrappedValue = android {
        return bridge.create_std__optional_NitroAvailablePurchasesAndroidOptions_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var ios: NitroAvailablePurchasesIosOptions? {
    @inline(__always)
    get {
      return { () -> NitroAvailablePurchasesIosOptions? in
        if bridge.has_value_std__optional_NitroAvailablePurchasesIosOptions_(self.__ios) {
          let __unwrapped = bridge.get_std__optional_NitroAvailablePurchasesIosOptions_(self.__ios)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__ios = { () -> bridge.std__optional_NitroAvailablePurchasesIosOptions_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroAvailablePurchasesIosOptions_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var android: NitroAvailablePurchasesAndroidOptions? {
    @inline(__always)
    get {
      return { () -> NitroAvailablePurchasesAndroidOptions? in
        if bridge.has_value_std__optional_NitroAvailablePurchasesAndroidOptions_(self.__android) {
          let __unwrapped = bridge.get_std__optional_NitroAvailablePurchasesAndroidOptions_(self.__android)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__android = { () -> bridge.std__optional_NitroAvailablePurchasesAndroidOptions_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroAvailablePurchasesAndroidOptions_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
