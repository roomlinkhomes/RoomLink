///
/// NitroSubscriptionStatus.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroSubscriptionStatus`, backed by a C++ struct.
 */
public typealias NitroSubscriptionStatus = margelo.nitro.iap.NitroSubscriptionStatus

public extension NitroSubscriptionStatus {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `NitroSubscriptionStatus`.
   */
  init(state: Double, platform: String, renewalInfo: NitroSubscriptionRenewalInfo?) {
    self.init(state, std.string(platform), { () -> bridge.std__optional_NitroSubscriptionRenewalInfo_ in
      if let __unwrappedValue = renewalInfo {
        return bridge.create_std__optional_NitroSubscriptionRenewalInfo_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var state: Double {
    @inline(__always)
    get {
      return self.__state
    }
    @inline(__always)
    set {
      self.__state = newValue
    }
  }
  
  var platform: String {
    @inline(__always)
    get {
      return String(self.__platform)
    }
    @inline(__always)
    set {
      self.__platform = std.string(newValue)
    }
  }
  
  var renewalInfo: NitroSubscriptionRenewalInfo? {
    @inline(__always)
    get {
      return { () -> NitroSubscriptionRenewalInfo? in
        if bridge.has_value_std__optional_NitroSubscriptionRenewalInfo_(self.__renewalInfo) {
          let __unwrapped = bridge.get_std__optional_NitroSubscriptionRenewalInfo_(self.__renewalInfo)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__renewalInfo = { () -> bridge.std__optional_NitroSubscriptionRenewalInfo_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroSubscriptionRenewalInfo_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
