///
/// NitroRequestPurchaseIos.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroRequestPurchaseIos`, backed by a C++ struct.
 */
public typealias NitroRequestPurchaseIos = margelo.nitro.iap.NitroRequestPurchaseIos

public extension NitroRequestPurchaseIos {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `NitroRequestPurchaseIos`.
   */
  init(sku: String, andDangerouslyFinishTransactionAutomatically: Bool?, appAccountToken: String?, quantity: Double?, withOffer: Dictionary<String, String>?) {
    self.init(std.string(sku), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = andDangerouslyFinishTransactionAutomatically {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = appAccountToken {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = quantity {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__unordered_map_std__string__std__string__ in
      if let __unwrappedValue = withOffer {
        return bridge.create_std__optional_std__unordered_map_std__string__std__string__({ () -> bridge.std__unordered_map_std__string__std__string_ in
          var __map = bridge.create_std__unordered_map_std__string__std__string_(__unwrappedValue.count)
          for (__k, __v) in __unwrappedValue {
            bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
          }
          return __map
        }())
      } else {
        return .init()
      }
    }())
  }

  var sku: String {
    @inline(__always)
    get {
      return String(self.__sku)
    }
    @inline(__always)
    set {
      self.__sku = std.string(newValue)
    }
  }
  
  var andDangerouslyFinishTransactionAutomatically: Bool? {
    @inline(__always)
    get {
      return self.__andDangerouslyFinishTransactionAutomatically.value
    }
    @inline(__always)
    set {
      self.__andDangerouslyFinishTransactionAutomatically = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var appAccountToken: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__appAccountToken) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__appAccountToken)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__appAccountToken = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var quantity: Double? {
    @inline(__always)
    get {
      return self.__quantity.value
    }
    @inline(__always)
    set {
      self.__quantity = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var withOffer: Dictionary<String, String>? {
    @inline(__always)
    get {
      return { () -> Dictionary<String, String>? in
        if bridge.has_value_std__optional_std__unordered_map_std__string__std__string__(self.__withOffer) {
          let __unwrapped = bridge.get_std__optional_std__unordered_map_std__string__std__string__(self.__withOffer)
          return { () -> Dictionary<String, String> in
            var __dictionary = Dictionary<String, String>(minimumCapacity: __unwrapped.size())
            let __keys = bridge.get_std__unordered_map_std__string__std__string__keys(__unwrapped)
            for __key in __keys {
              let __value = bridge.get_std__unordered_map_std__string__std__string__value(__unwrapped, __key)
              __dictionary[String(__key)] = String(__value)
            }
            return __dictionary
          }()
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__withOffer = { () -> bridge.std__optional_std__unordered_map_std__string__std__string__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__unordered_map_std__string__std__string__({ () -> bridge.std__unordered_map_std__string__std__string_ in
            var __map = bridge.create_std__unordered_map_std__string__std__string_(__unwrappedValue.count)
            for (__k, __v) in __unwrappedValue {
              bridge.emplace_std__unordered_map_std__string__std__string_(&__map, std.string(__k), std.string(__v))
            }
            return __map
          }())
        } else {
          return .init()
        }
      }()
    }
  }
}
