///
/// PurchaseAndroid.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `PurchaseAndroid`, backed by a C++ struct.
 */
public typealias PurchaseAndroid = margelo.nitro.iap.PurchaseAndroid

public extension PurchaseAndroid {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `PurchaseAndroid`.
   */
  init(autoRenewingAndroid: Bool?, dataAndroid: String?, developerPayloadAndroid: String?, id: String, ids: [String]?, isAcknowledgedAndroid: Bool?, isAutoRenewing: Bool, obfuscatedAccountIdAndroid: String?, obfuscatedProfileIdAndroid: String?, packageNameAndroid: String?, platform: IapPlatform, productId: String, purchaseState: PurchaseState, purchaseToken: String?, quantity: Double, signatureAndroid: String?, transactionDate: Double) {
    self.init({ () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = autoRenewingAndroid {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = dataAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = developerPayloadAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), std.string(id), { () -> bridge.std__optional_std__vector_std__string__ in
      if let __unwrappedValue = ids {
        return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
          var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(std.string(__item))
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = isAcknowledgedAndroid {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), isAutoRenewing, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = obfuscatedAccountIdAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = obfuscatedProfileIdAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = packageNameAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), platform, std.string(productId), purchaseState, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = purchaseToken {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), quantity, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = signatureAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), transactionDate)
  }

  var autoRenewingAndroid: Bool? {
    @inline(__always)
    get {
      return self.__autoRenewingAndroid.value
    }
    @inline(__always)
    set {
      self.__autoRenewingAndroid = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var dataAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__dataAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__dataAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__dataAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var developerPayloadAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__developerPayloadAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__developerPayloadAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__developerPayloadAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var id: String {
    @inline(__always)
    get {
      return String(self.__id)
    }
    @inline(__always)
    set {
      self.__id = std.string(newValue)
    }
  }
  
  var ids: [String]? {
    @inline(__always)
    get {
      return { () -> [String]? in
        if bridge.has_value_std__optional_std__vector_std__string__(self.__ids) {
          let __unwrapped = bridge.get_std__optional_std__vector_std__string__(self.__ids)
          return __unwrapped.map({ __item in String(__item) })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__ids = { () -> bridge.std__optional_std__vector_std__string__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_std__string__({ () -> bridge.std__vector_std__string_ in
            var __vector = bridge.create_std__vector_std__string_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(std.string(__item))
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
  
  var isAcknowledgedAndroid: Bool? {
    @inline(__always)
    get {
      return self.__isAcknowledgedAndroid.value
    }
    @inline(__always)
    set {
      self.__isAcknowledgedAndroid = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var isAutoRenewing: Bool {
    @inline(__always)
    get {
      return self.__isAutoRenewing
    }
    @inline(__always)
    set {
      self.__isAutoRenewing = newValue
    }
  }
  
  var obfuscatedAccountIdAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__obfuscatedAccountIdAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__obfuscatedAccountIdAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__obfuscatedAccountIdAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var obfuscatedProfileIdAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__obfuscatedProfileIdAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__obfuscatedProfileIdAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__obfuscatedProfileIdAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var packageNameAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__packageNameAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__packageNameAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__packageNameAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var platform: IapPlatform {
    @inline(__always)
    get {
      return self.__platform
    }
    @inline(__always)
    set {
      self.__platform = newValue
    }
  }
  
  var productId: String {
    @inline(__always)
    get {
      return String(self.__productId)
    }
    @inline(__always)
    set {
      self.__productId = std.string(newValue)
    }
  }
  
  var purchaseState: PurchaseState {
    @inline(__always)
    get {
      return self.__purchaseState
    }
    @inline(__always)
    set {
      self.__purchaseState = newValue
    }
  }
  
  var purchaseToken: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__purchaseToken) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__purchaseToken)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__purchaseToken = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var quantity: Double {
    @inline(__always)
    get {
      return self.__quantity
    }
    @inline(__always)
    set {
      self.__quantity = newValue
    }
  }
  
  var signatureAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__signatureAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__signatureAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__signatureAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var transactionDate: Double {
    @inline(__always)
    get {
      return self.__transactionDate
    }
    @inline(__always)
    set {
      self.__transactionDate = newValue
    }
  }
}
