///
/// NitroReceiptValidationParams.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroReceiptValidationParams`, backed by a C++ struct.
 */
public typealias NitroReceiptValidationParams = margelo.nitro.iap.NitroReceiptValidationParams

public extension NitroReceiptValidationParams {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `NitroReceiptValidationParams`.
   */
  init(sku: String, androidOptions: NitroReceiptValidationAndroidOptions?) {
    self.init(std.string(sku), { () -> bridge.std__optional_NitroReceiptValidationAndroidOptions_ in
      if let __unwrappedValue = androidOptions {
        return bridge.create_std__optional_NitroReceiptValidationAndroidOptions_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var sku: String {
    @inline(__always)
    get {
      return String(self.__sku)
    }
    @inline(__always)
    set {
      self.__sku = std.string(newValue)
    }
  }
  
  var androidOptions: NitroReceiptValidationAndroidOptions? {
    @inline(__always)
    get {
      return { () -> NitroReceiptValidationAndroidOptions? in
        if bridge.has_value_std__optional_NitroReceiptValidationAndroidOptions_(self.__androidOptions) {
          let __unwrapped = bridge.get_std__optional_NitroReceiptValidationAndroidOptions_(self.__androidOptions)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__androidOptions = { () -> bridge.std__optional_NitroReceiptValidationAndroidOptions_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroReceiptValidationAndroidOptions_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
