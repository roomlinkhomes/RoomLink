///
/// NitroReceiptValidationResultIOS.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroReceiptValidationResultIOS`, backed by a C++ struct.
 */
public typealias NitroReceiptValidationResultIOS = margelo.nitro.iap.NitroReceiptValidationResultIOS

public extension NitroReceiptValidationResultIOS {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `NitroReceiptValidationResultIOS`.
   */
  init(isValid: Bool, receiptData: String, jwsRepresentation: String, latestTransaction: NitroPurchase?) {
    self.init(isValid, std.string(receiptData), std.string(jwsRepresentation), { () -> bridge.std__optional_NitroPurchase_ in
      if let __unwrappedValue = latestTransaction {
        return bridge.create_std__optional_NitroPurchase_(__unwrappedValue)
      } else {
        return .init()
      }
    }())
  }

  var isValid: Bool {
    @inline(__always)
    get {
      return self.__isValid
    }
    @inline(__always)
    set {
      self.__isValid = newValue
    }
  }
  
  var receiptData: String {
    @inline(__always)
    get {
      return String(self.__receiptData)
    }
    @inline(__always)
    set {
      self.__receiptData = std.string(newValue)
    }
  }
  
  var jwsRepresentation: String {
    @inline(__always)
    get {
      return String(self.__jwsRepresentation)
    }
    @inline(__always)
    set {
      self.__jwsRepresentation = std.string(newValue)
    }
  }
  
  var latestTransaction: NitroPurchase? {
    @inline(__always)
    get {
      return { () -> NitroPurchase? in
        if bridge.has_value_std__optional_NitroPurchase_(self.__latestTransaction) {
          let __unwrapped = bridge.get_std__optional_NitroPurchase_(self.__latestTransaction)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__latestTransaction = { () -> bridge.std__optional_NitroPurchase_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NitroPurchase_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
