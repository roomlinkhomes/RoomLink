///
/// NitroRequestPurchaseAndroid.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroRequestPurchaseAndroid`, backed by a C++ struct.
 */
public typealias NitroRequestPurchaseAndroid = margelo.nitro.iap.NitroRequestPurchaseAndroid

public extension NitroRequestPurchaseAndroid {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `NitroRequestPurchaseAndroid`.
   */
  init(skus: [String], obfuscatedAccountIdAndroid: String?, obfuscatedProfileIdAndroid: String?, isOfferPersonalized: Bool?, subscriptionOffers: [NitroSubscriptionOffer]?, replacementModeAndroid: Double?, purchaseTokenAndroid: String?) {
    self.init({ () -> bridge.std__vector_std__string_ in
      var __vector = bridge.create_std__vector_std__string_(skus.count)
      for __item in skus {
        __vector.push_back(std.string(__item))
      }
      return __vector
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = obfuscatedAccountIdAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = obfuscatedProfileIdAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = isOfferPersonalized {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__vector_NitroSubscriptionOffer__ in
      if let __unwrappedValue = subscriptionOffers {
        return bridge.create_std__optional_std__vector_NitroSubscriptionOffer__({ () -> bridge.std__vector_NitroSubscriptionOffer_ in
          var __vector = bridge.create_std__vector_NitroSubscriptionOffer_(__unwrappedValue.count)
          for __item in __unwrappedValue {
            __vector.push_back(__item)
          }
          return __vector
        }())
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = replacementModeAndroid {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = purchaseTokenAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var skus: [String] {
    @inline(__always)
    get {
      return self.__skus.map({ __item in String(__item) })
    }
    @inline(__always)
    set {
      self.__skus = { () -> bridge.std__vector_std__string_ in
        var __vector = bridge.create_std__vector_std__string_(newValue.count)
        for __item in newValue {
          __vector.push_back(std.string(__item))
        }
        return __vector
      }()
    }
  }
  
  var obfuscatedAccountIdAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__obfuscatedAccountIdAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__obfuscatedAccountIdAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__obfuscatedAccountIdAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var obfuscatedProfileIdAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__obfuscatedProfileIdAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__obfuscatedProfileIdAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__obfuscatedProfileIdAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var isOfferPersonalized: Bool? {
    @inline(__always)
    get {
      return self.__isOfferPersonalized.value
    }
    @inline(__always)
    set {
      self.__isOfferPersonalized = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var subscriptionOffers: [NitroSubscriptionOffer]? {
    @inline(__always)
    get {
      return { () -> [NitroSubscriptionOffer]? in
        if bridge.has_value_std__optional_std__vector_NitroSubscriptionOffer__(self.__subscriptionOffers) {
          let __unwrapped = bridge.get_std__optional_std__vector_NitroSubscriptionOffer__(self.__subscriptionOffers)
          return __unwrapped.map({ __item in __item })
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__subscriptionOffers = { () -> bridge.std__optional_std__vector_NitroSubscriptionOffer__ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__vector_NitroSubscriptionOffer__({ () -> bridge.std__vector_NitroSubscriptionOffer_ in
            var __vector = bridge.create_std__vector_NitroSubscriptionOffer_(__unwrappedValue.count)
            for __item in __unwrappedValue {
              __vector.push_back(__item)
            }
            return __vector
          }())
        } else {
          return .init()
        }
      }()
    }
  }
  
  var replacementModeAndroid: Double? {
    @inline(__always)
    get {
      return self.__replacementModeAndroid.value
    }
    @inline(__always)
    set {
      self.__replacementModeAndroid = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var purchaseTokenAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__purchaseTokenAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__purchaseTokenAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__purchaseTokenAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
