///
/// NitroPurchase.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/**
 * Represents an instance of `NitroPurchase`, backed by a C++ struct.
 */
public typealias NitroPurchase = margelo.nitro.iap.NitroPurchase

public extension NitroPurchase {
  private typealias bridge = margelo.nitro.iap.bridge.swift

  /**
   * Create a new instance of `NitroPurchase`.
   */
  init(id: String, productId: String, transactionDate: Double, purchaseToken: String?, platform: String, quantity: Double, purchaseState: String, isAutoRenewing: Bool, quantityIOS: Double?, originalTransactionDateIOS: Double?, originalTransactionIdentifierIOS: String?, appAccountToken: String?, purchaseTokenAndroid: String?, dataAndroid: String?, signatureAndroid: String?, autoRenewingAndroid: Bool?, purchaseStateAndroid: Double?, isAcknowledgedAndroid: Bool?, packageNameAndroid: String?, obfuscatedAccountIdAndroid: String?, obfuscatedProfileIdAndroid: String?) {
    self.init(std.string(id), std.string(productId), transactionDate, { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = purchaseToken {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), std.string(platform), quantity, std.string(purchaseState), isAutoRenewing, { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = quantityIOS {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = originalTransactionDateIOS {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = originalTransactionIdentifierIOS {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = appAccountToken {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = purchaseTokenAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = dataAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = signatureAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = autoRenewingAndroid {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_double_ in
      if let __unwrappedValue = purchaseStateAndroid {
        return bridge.create_std__optional_double_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_bool_ in
      if let __unwrappedValue = isAcknowledgedAndroid {
        return bridge.create_std__optional_bool_(__unwrappedValue)
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = packageNameAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = obfuscatedAccountIdAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }(), { () -> bridge.std__optional_std__string_ in
      if let __unwrappedValue = obfuscatedProfileIdAndroid {
        return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
      } else {
        return .init()
      }
    }())
  }

  var id: String {
    @inline(__always)
    get {
      return String(self.__id)
    }
    @inline(__always)
    set {
      self.__id = std.string(newValue)
    }
  }
  
  var productId: String {
    @inline(__always)
    get {
      return String(self.__productId)
    }
    @inline(__always)
    set {
      self.__productId = std.string(newValue)
    }
  }
  
  var transactionDate: Double {
    @inline(__always)
    get {
      return self.__transactionDate
    }
    @inline(__always)
    set {
      self.__transactionDate = newValue
    }
  }
  
  var purchaseToken: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__purchaseToken) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__purchaseToken)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__purchaseToken = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var platform: String {
    @inline(__always)
    get {
      return String(self.__platform)
    }
    @inline(__always)
    set {
      self.__platform = std.string(newValue)
    }
  }
  
  var quantity: Double {
    @inline(__always)
    get {
      return self.__quantity
    }
    @inline(__always)
    set {
      self.__quantity = newValue
    }
  }
  
  var purchaseState: String {
    @inline(__always)
    get {
      return String(self.__purchaseState)
    }
    @inline(__always)
    set {
      self.__purchaseState = std.string(newValue)
    }
  }
  
  var isAutoRenewing: Bool {
    @inline(__always)
    get {
      return self.__isAutoRenewing
    }
    @inline(__always)
    set {
      self.__isAutoRenewing = newValue
    }
  }
  
  var quantityIOS: Double? {
    @inline(__always)
    get {
      return self.__quantityIOS.value
    }
    @inline(__always)
    set {
      self.__quantityIOS = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var originalTransactionDateIOS: Double? {
    @inline(__always)
    get {
      return self.__originalTransactionDateIOS.value
    }
    @inline(__always)
    set {
      self.__originalTransactionDateIOS = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var originalTransactionIdentifierIOS: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__originalTransactionIdentifierIOS) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__originalTransactionIdentifierIOS)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__originalTransactionIdentifierIOS = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var appAccountToken: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__appAccountToken) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__appAccountToken)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__appAccountToken = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var purchaseTokenAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__purchaseTokenAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__purchaseTokenAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__purchaseTokenAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var dataAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__dataAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__dataAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__dataAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var signatureAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__signatureAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__signatureAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__signatureAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var autoRenewingAndroid: Bool? {
    @inline(__always)
    get {
      return self.__autoRenewingAndroid.value
    }
    @inline(__always)
    set {
      self.__autoRenewingAndroid = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var purchaseStateAndroid: Double? {
    @inline(__always)
    get {
      return self.__purchaseStateAndroid.value
    }
    @inline(__always)
    set {
      self.__purchaseStateAndroid = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var isAcknowledgedAndroid: Bool? {
    @inline(__always)
    get {
      return self.__isAcknowledgedAndroid.value
    }
    @inline(__always)
    set {
      self.__isAcknowledgedAndroid = { () -> bridge.std__optional_bool_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_bool_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
  
  var packageNameAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__packageNameAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__packageNameAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__packageNameAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var obfuscatedAccountIdAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__obfuscatedAccountIdAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__obfuscatedAccountIdAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__obfuscatedAccountIdAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
  
  var obfuscatedProfileIdAndroid: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__obfuscatedProfileIdAndroid) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__obfuscatedProfileIdAndroid)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__obfuscatedProfileIdAndroid = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
