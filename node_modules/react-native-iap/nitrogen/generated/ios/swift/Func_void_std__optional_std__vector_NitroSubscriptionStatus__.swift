///
/// Func_void_std__optional_std__vector_NitroSubscriptionStatus__.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules


/**
 * Wraps a Swift `(_ value: [NitroSubscriptionStatus]?) -> Void` as a class.
 * This class can be used from C++, e.g. to wrap the Swift closure as a `std::function`.
 */
public final class Func_void_std__optional_std__vector_NitroSubscriptionStatus__ {
  public typealias bridge = margelo.nitro.iap.bridge.swift

  private let closure: (_ value: [NitroSubscriptionStatus]?) -> Void

  public init(_ closure: @escaping (_ value: [NitroSubscriptionStatus]?) -> Void) {
    self.closure = closure
  }

  @inline(__always)
  public func call(value: bridge.std__optional_std__vector_NitroSubscriptionStatus__) -> Void {
    self.closure({ () -> [NitroSubscriptionStatus]? in
      if bridge.has_value_std__optional_std__vector_NitroSubscriptionStatus__(value) {
        let __unwrapped = bridge.get_std__optional_std__vector_NitroSubscriptionStatus__(value)
        return __unwrapped.map({ __item in __item })
      } else {
        return nil
      }
    }())
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  @inline(__always)
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `Func_void_std__optional_std__vector_NitroSubscriptionStatus__`.
   * The pointer has to be a retained opaque `Unmanaged<Func_void_std__optional_std__vector_NitroSubscriptionStatus__>`.
   * This removes one strong reference from the object!
   */
  @inline(__always)
  public static func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> Func_void_std__optional_std__vector_NitroSubscriptionStatus__ {
    return Unmanaged<Func_void_std__optional_std__vector_NitroSubscriptionStatus__>.fromOpaque(pointer).takeRetainedValue()
  }
}
