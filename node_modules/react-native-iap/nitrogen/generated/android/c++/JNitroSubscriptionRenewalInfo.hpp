///
/// JNitroSubscriptionRenewalInfo.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroSubscriptionRenewalInfo.hpp"

#include <optional>
#include <string>

namespace margelo::nitro::iap {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroSubscriptionRenewalInfo" and the the Kotlin data class "NitroSubscriptionRenewalInfo".
   */
  struct JNitroSubscriptionRenewalInfo final: public jni::JavaClass<JNitroSubscriptionRenewalInfo> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/iap/NitroSubscriptionRenewalInfo;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroSubscriptionRenewalInfo by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroSubscriptionRenewalInfo toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldAutoRenewStatus = clazz->getField<jboolean>("autoRenewStatus");
      jboolean autoRenewStatus = this->getFieldValue(fieldAutoRenewStatus);
      static const auto fieldAutoRenewPreference = clazz->getField<jni::JString>("autoRenewPreference");
      jni::local_ref<jni::JString> autoRenewPreference = this->getFieldValue(fieldAutoRenewPreference);
      static const auto fieldExpirationReason = clazz->getField<jni::JDouble>("expirationReason");
      jni::local_ref<jni::JDouble> expirationReason = this->getFieldValue(fieldExpirationReason);
      static const auto fieldGracePeriodExpirationDate = clazz->getField<jni::JDouble>("gracePeriodExpirationDate");
      jni::local_ref<jni::JDouble> gracePeriodExpirationDate = this->getFieldValue(fieldGracePeriodExpirationDate);
      static const auto fieldCurrentProductID = clazz->getField<jni::JString>("currentProductID");
      jni::local_ref<jni::JString> currentProductID = this->getFieldValue(fieldCurrentProductID);
      static const auto fieldPlatform = clazz->getField<jni::JString>("platform");
      jni::local_ref<jni::JString> platform = this->getFieldValue(fieldPlatform);
      return NitroSubscriptionRenewalInfo(
        static_cast<bool>(autoRenewStatus),
        autoRenewPreference != nullptr ? std::make_optional(autoRenewPreference->toStdString()) : std::nullopt,
        expirationReason != nullptr ? std::make_optional(expirationReason->value()) : std::nullopt,
        gracePeriodExpirationDate != nullptr ? std::make_optional(gracePeriodExpirationDate->value()) : std::nullopt,
        currentProductID != nullptr ? std::make_optional(currentProductID->toStdString()) : std::nullopt,
        platform->toStdString()
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroSubscriptionRenewalInfo::javaobject> fromCpp(const NitroSubscriptionRenewalInfo& value) {
      return newInstance(
        value.autoRenewStatus,
        value.autoRenewPreference.has_value() ? jni::make_jstring(value.autoRenewPreference.value()) : nullptr,
        value.expirationReason.has_value() ? jni::JDouble::valueOf(value.expirationReason.value()) : nullptr,
        value.gracePeriodExpirationDate.has_value() ? jni::JDouble::valueOf(value.gracePeriodExpirationDate.value()) : nullptr,
        value.currentProductID.has_value() ? jni::make_jstring(value.currentProductID.value()) : nullptr,
        jni::make_jstring(value.platform)
      );
    }
  };

} // namespace margelo::nitro::iap
