///
/// HybridRnIapSpec.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <NitroModules/JHybridObject.hpp>
#include <fbjni/fbjni.h>
#include "HybridRnIapSpec.hpp"




namespace margelo::nitro::iap {

  using namespace facebook;

  class JHybridRnIapSpec: public jni::HybridClass<JHybridRnIapSpec, JHybridObject>,
                          public virtual HybridRnIapSpec {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/iap/HybridRnIapSpec;";
    static jni::local_ref<jhybriddata> initHybrid(jni::alias_ref<jhybridobject> jThis);
    static void registerNatives();

  protected:
    // C++ constructor (called from Java via `initHybrid()`)
    explicit JHybridRnIapSpec(jni::alias_ref<jhybridobject> jThis) :
      HybridObject(HybridRnIapSpec::TAG),
      HybridBase(jThis),
      _javaPart(jni::make_global(jThis)) {}

  public:
    ~JHybridRnIapSpec() override {
      // Hermes GC can destroy JS objects on a non-JNI Thread.
      jni::ThreadScope::WithClassLoader([&] { _javaPart.reset(); });
    }

  public:
    size_t getExternalMemorySize() noexcept override;
    void dispose() noexcept override;

  public:
    inline const jni::global_ref<JHybridRnIapSpec::javaobject>& getJavaPart() const noexcept {
      return _javaPart;
    }

  public:
    // Properties
    

  public:
    // Methods
    std::shared_ptr<Promise<bool>> initConnection() override;
    std::shared_ptr<Promise<bool>> endConnection() override;
    std::shared_ptr<Promise<std::vector<NitroProduct>>> fetchProducts(const std::vector<std::string>& skus, const std::string& type) override;
    std::shared_ptr<Promise<RequestPurchaseResult>> requestPurchase(const NitroPurchaseRequest& request) override;
    std::shared_ptr<Promise<std::vector<NitroPurchase>>> getAvailablePurchases(const std::optional<NitroAvailablePurchasesOptions>& options) override;
    std::shared_ptr<Promise<std::variant<bool, NitroPurchaseResult>>> finishTransaction(const NitroFinishTransactionParams& params) override;
    void addPurchaseUpdatedListener(const std::function<void(const NitroPurchase& /* purchase */)>& listener) override;
    void addPurchaseErrorListener(const std::function<void(const NitroPurchaseResult& /* error */)>& listener) override;
    void removePurchaseUpdatedListener(const std::function<void(const NitroPurchase& /* purchase */)>& listener) override;
    void removePurchaseErrorListener(const std::function<void(const NitroPurchaseResult& /* error */)>& listener) override;
    void addPromotedProductListenerIOS(const std::function<void(const NitroProduct& /* product */)>& listener) override;
    void removePromotedProductListenerIOS(const std::function<void(const NitroProduct& /* product */)>& listener) override;
    std::shared_ptr<Promise<std::string>> getStorefrontIOS() override;
    std::shared_ptr<Promise<std::optional<std::string>>> getAppTransactionIOS() override;
    std::shared_ptr<Promise<std::optional<NitroProduct>>> requestPromotedProductIOS() override;
    std::shared_ptr<Promise<void>> buyPromotedProductIOS() override;
    std::shared_ptr<Promise<bool>> presentCodeRedemptionSheetIOS() override;
    std::shared_ptr<Promise<void>> clearTransactionIOS() override;
    std::shared_ptr<Promise<std::optional<std::string>>> beginRefundRequestIOS(const std::string& sku) override;
    std::shared_ptr<Promise<std::optional<std::vector<NitroSubscriptionStatus>>>> subscriptionStatusIOS(const std::string& sku) override;
    std::shared_ptr<Promise<std::optional<NitroPurchase>>> currentEntitlementIOS(const std::string& sku) override;
    std::shared_ptr<Promise<std::optional<NitroPurchase>>> latestTransactionIOS(const std::string& sku) override;
    std::shared_ptr<Promise<std::vector<NitroPurchase>>> getPendingTransactionsIOS() override;
    std::shared_ptr<Promise<bool>> syncIOS() override;
    std::shared_ptr<Promise<std::vector<NitroPurchase>>> showManageSubscriptionsIOS() override;
    std::shared_ptr<Promise<bool>> isEligibleForIntroOfferIOS(const std::string& groupID) override;
    std::shared_ptr<Promise<std::string>> getReceiptDataIOS() override;
    std::shared_ptr<Promise<bool>> isTransactionVerifiedIOS(const std::string& sku) override;
    std::shared_ptr<Promise<std::optional<std::string>>> getTransactionJwsIOS(const std::string& sku) override;
    std::shared_ptr<Promise<std::variant<NitroReceiptValidationResultIOS, NitroReceiptValidationResultAndroid>>> validateReceipt(const NitroReceiptValidationParams& params) override;
    std::shared_ptr<Promise<std::string>> getStorefrontAndroid() override;
    std::shared_ptr<Promise<void>> deepLinkToSubscriptionsAndroid(const NitroDeepLinkOptionsAndroid& options) override;

  private:
    friend HybridBase;
    using HybridBase::HybridBase;
    jni::global_ref<JHybridRnIapSpec::javaobject> _javaPart;
  };

} // namespace margelo::nitro::iap
