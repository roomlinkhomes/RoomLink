///
/// JNitroAvailablePurchasesIosOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroAvailablePurchasesIosOptions.hpp"

#include <optional>

namespace margelo::nitro::iap {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroAvailablePurchasesIosOptions" and the the Kotlin data class "NitroAvailablePurchasesIosOptions".
   */
  struct JNitroAvailablePurchasesIosOptions final: public jni::JavaClass<JNitroAvailablePurchasesIosOptions> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/iap/NitroAvailablePurchasesIosOptions;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroAvailablePurchasesIosOptions by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroAvailablePurchasesIosOptions toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldAlsoPublishToEventListener = clazz->getField<jni::JBoolean>("alsoPublishToEventListener");
      jni::local_ref<jni::JBoolean> alsoPublishToEventListener = this->getFieldValue(fieldAlsoPublishToEventListener);
      static const auto fieldOnlyIncludeActiveItems = clazz->getField<jni::JBoolean>("onlyIncludeActiveItems");
      jni::local_ref<jni::JBoolean> onlyIncludeActiveItems = this->getFieldValue(fieldOnlyIncludeActiveItems);
      static const auto fieldAlsoPublishToEventListenerIOS = clazz->getField<jni::JBoolean>("alsoPublishToEventListenerIOS");
      jni::local_ref<jni::JBoolean> alsoPublishToEventListenerIOS = this->getFieldValue(fieldAlsoPublishToEventListenerIOS);
      static const auto fieldOnlyIncludeActiveItemsIOS = clazz->getField<jni::JBoolean>("onlyIncludeActiveItemsIOS");
      jni::local_ref<jni::JBoolean> onlyIncludeActiveItemsIOS = this->getFieldValue(fieldOnlyIncludeActiveItemsIOS);
      return NitroAvailablePurchasesIosOptions(
        alsoPublishToEventListener != nullptr ? std::make_optional(static_cast<bool>(alsoPublishToEventListener->value())) : std::nullopt,
        onlyIncludeActiveItems != nullptr ? std::make_optional(static_cast<bool>(onlyIncludeActiveItems->value())) : std::nullopt,
        alsoPublishToEventListenerIOS != nullptr ? std::make_optional(static_cast<bool>(alsoPublishToEventListenerIOS->value())) : std::nullopt,
        onlyIncludeActiveItemsIOS != nullptr ? std::make_optional(static_cast<bool>(onlyIncludeActiveItemsIOS->value())) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroAvailablePurchasesIosOptions::javaobject> fromCpp(const NitroAvailablePurchasesIosOptions& value) {
      return newInstance(
        value.alsoPublishToEventListener.has_value() ? jni::JBoolean::valueOf(value.alsoPublishToEventListener.value()) : nullptr,
        value.onlyIncludeActiveItems.has_value() ? jni::JBoolean::valueOf(value.onlyIncludeActiveItems.value()) : nullptr,
        value.alsoPublishToEventListenerIOS.has_value() ? jni::JBoolean::valueOf(value.alsoPublishToEventListenerIOS.value()) : nullptr,
        value.onlyIncludeActiveItemsIOS.has_value() ? jni::JBoolean::valueOf(value.onlyIncludeActiveItemsIOS.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::iap
