///
/// JNitroRequestPurchaseIos.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroRequestPurchaseIos.hpp"

#include <optional>
#include <string>
#include <unordered_map>

namespace margelo::nitro::iap {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroRequestPurchaseIos" and the the Kotlin data class "NitroRequestPurchaseIos".
   */
  struct JNitroRequestPurchaseIos final: public jni::JavaClass<JNitroRequestPurchaseIos> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/iap/NitroRequestPurchaseIos;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroRequestPurchaseIos by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroRequestPurchaseIos toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldSku = clazz->getField<jni::JString>("sku");
      jni::local_ref<jni::JString> sku = this->getFieldValue(fieldSku);
      static const auto fieldAndDangerouslyFinishTransactionAutomatically = clazz->getField<jni::JBoolean>("andDangerouslyFinishTransactionAutomatically");
      jni::local_ref<jni::JBoolean> andDangerouslyFinishTransactionAutomatically = this->getFieldValue(fieldAndDangerouslyFinishTransactionAutomatically);
      static const auto fieldAppAccountToken = clazz->getField<jni::JString>("appAccountToken");
      jni::local_ref<jni::JString> appAccountToken = this->getFieldValue(fieldAppAccountToken);
      static const auto fieldQuantity = clazz->getField<jni::JDouble>("quantity");
      jni::local_ref<jni::JDouble> quantity = this->getFieldValue(fieldQuantity);
      static const auto fieldWithOffer = clazz->getField<jni::JMap<jni::JString, jni::JString>>("withOffer");
      jni::local_ref<jni::JMap<jni::JString, jni::JString>> withOffer = this->getFieldValue(fieldWithOffer);
      return NitroRequestPurchaseIos(
        sku->toStdString(),
        andDangerouslyFinishTransactionAutomatically != nullptr ? std::make_optional(static_cast<bool>(andDangerouslyFinishTransactionAutomatically->value())) : std::nullopt,
        appAccountToken != nullptr ? std::make_optional(appAccountToken->toStdString()) : std::nullopt,
        quantity != nullptr ? std::make_optional(quantity->value()) : std::nullopt,
        withOffer != nullptr ? std::make_optional([&]() {
          std::unordered_map<std::string, std::string> __map;
          __map.reserve(withOffer->size());
          for (const auto& __entry : *withOffer) {
            __map.emplace(__entry.first->toStdString(), __entry.second->toStdString());
          }
          return __map;
        }()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroRequestPurchaseIos::javaobject> fromCpp(const NitroRequestPurchaseIos& value) {
      return newInstance(
        jni::make_jstring(value.sku),
        value.andDangerouslyFinishTransactionAutomatically.has_value() ? jni::JBoolean::valueOf(value.andDangerouslyFinishTransactionAutomatically.value()) : nullptr,
        value.appAccountToken.has_value() ? jni::make_jstring(value.appAccountToken.value()) : nullptr,
        value.quantity.has_value() ? jni::JDouble::valueOf(value.quantity.value()) : nullptr,
        value.withOffer.has_value() ? [&]() -> jni::local_ref<jni::JMap<jni::JString, jni::JString>> {
          auto __map = jni::JHashMap<jni::JString, jni::JString>::create(value.withOffer.value().size());
          for (const auto& __entry : value.withOffer.value()) {
            __map->put(jni::make_jstring(__entry.first), jni::make_jstring(__entry.second));
          }
          return __map;
        }() : nullptr
      );
    }
  };

} // namespace margelo::nitro::iap
