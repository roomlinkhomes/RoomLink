///
/// JHybridRnIapSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridRnIapSpec.hpp"

// Forward declaration of `NitroProduct` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroProduct; }
// Forward declaration of `RequestPurchaseResult` to properly resolve imports.
namespace margelo::nitro::iap { struct RequestPurchaseResult; }
// Forward declaration of `PurchaseAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct PurchaseAndroid; }
// Forward declaration of `PurchaseIOS` to properly resolve imports.
namespace margelo::nitro::iap { struct PurchaseIOS; }
// Forward declaration of `IapPlatform` to properly resolve imports.
namespace margelo::nitro::iap { enum class IapPlatform; }
// Forward declaration of `PurchaseState` to properly resolve imports.
namespace margelo::nitro::iap { enum class PurchaseState; }
// Forward declaration of `PurchaseOfferIOS` to properly resolve imports.
namespace margelo::nitro::iap { struct PurchaseOfferIOS; }
// Forward declaration of `NitroPurchase` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroPurchase; }
// Forward declaration of `NitroPurchaseResult` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroPurchaseResult; }
// Forward declaration of `NitroSubscriptionStatus` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroSubscriptionStatus; }
// Forward declaration of `NitroSubscriptionRenewalInfo` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroSubscriptionRenewalInfo; }
// Forward declaration of `NitroReceiptValidationResultIOS` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationResultIOS; }
// Forward declaration of `NitroReceiptValidationResultAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationResultAndroid; }
// Forward declaration of `NitroPurchaseRequest` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroPurchaseRequest; }
// Forward declaration of `NitroRequestPurchaseIos` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroRequestPurchaseIos; }
// Forward declaration of `NitroRequestPurchaseAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroRequestPurchaseAndroid; }
// Forward declaration of `NitroSubscriptionOffer` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroSubscriptionOffer; }
// Forward declaration of `NitroAvailablePurchasesOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroAvailablePurchasesOptions; }
// Forward declaration of `NitroAvailablePurchasesIosOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroAvailablePurchasesIosOptions; }
// Forward declaration of `NitroAvailablePurchasesAndroidOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroAvailablePurchasesAndroidOptions; }
// Forward declaration of `NitroFinishTransactionParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroFinishTransactionParams; }
// Forward declaration of `NitroFinishTransactionIosParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroFinishTransactionIosParams; }
// Forward declaration of `NitroFinishTransactionAndroidParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroFinishTransactionAndroidParams; }
// Forward declaration of `NitroReceiptValidationParams` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationParams; }
// Forward declaration of `NitroReceiptValidationAndroidOptions` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroReceiptValidationAndroidOptions; }
// Forward declaration of `NitroDeepLinkOptionsAndroid` to properly resolve imports.
namespace margelo::nitro::iap { struct NitroDeepLinkOptionsAndroid; }

#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include "NitroProduct.hpp"
#include <vector>
#include "JNitroProduct.hpp"
#include <string>
#include <optional>
#include "RequestPurchaseResult.hpp"
#include "JRequestPurchaseResult.hpp"
#include "PurchaseAndroid.hpp"
#include "PurchaseIOS.hpp"
#include <variant>
#include "JVariant_PurchaseAndroid_PurchaseIOS.hpp"
#include "JPurchaseAndroid.hpp"
#include "IapPlatform.hpp"
#include "JIapPlatform.hpp"
#include "PurchaseState.hpp"
#include "JPurchaseState.hpp"
#include "JPurchaseIOS.hpp"
#include "PurchaseOfferIOS.hpp"
#include "JPurchaseOfferIOS.hpp"
#include "JPurchase.hpp"
#include "NitroPurchase.hpp"
#include "JNitroPurchase.hpp"
#include "NitroPurchaseResult.hpp"
#include "JVariant_Boolean_NitroPurchaseResult.hpp"
#include "JNitroPurchaseResult.hpp"
#include "NitroSubscriptionStatus.hpp"
#include "JNitroSubscriptionStatus.hpp"
#include "NitroSubscriptionRenewalInfo.hpp"
#include "JNitroSubscriptionRenewalInfo.hpp"
#include "NitroReceiptValidationResultIOS.hpp"
#include "NitroReceiptValidationResultAndroid.hpp"
#include "JVariant_NitroReceiptValidationResultIOS_NitroReceiptValidationResultAndroid.hpp"
#include "JNitroReceiptValidationResultIOS.hpp"
#include "JNitroReceiptValidationResultAndroid.hpp"
#include "NitroPurchaseRequest.hpp"
#include "JNitroPurchaseRequest.hpp"
#include "NitroRequestPurchaseIos.hpp"
#include "JNitroRequestPurchaseIos.hpp"
#include <unordered_map>
#include "NitroRequestPurchaseAndroid.hpp"
#include "JNitroRequestPurchaseAndroid.hpp"
#include "NitroSubscriptionOffer.hpp"
#include "JNitroSubscriptionOffer.hpp"
#include "NitroAvailablePurchasesOptions.hpp"
#include "JNitroAvailablePurchasesOptions.hpp"
#include "NitroAvailablePurchasesIosOptions.hpp"
#include "JNitroAvailablePurchasesIosOptions.hpp"
#include "NitroAvailablePurchasesAndroidOptions.hpp"
#include "JNitroAvailablePurchasesAndroidOptions.hpp"
#include "NitroFinishTransactionParams.hpp"
#include "JNitroFinishTransactionParams.hpp"
#include "NitroFinishTransactionIosParams.hpp"
#include "JNitroFinishTransactionIosParams.hpp"
#include "NitroFinishTransactionAndroidParams.hpp"
#include "JNitroFinishTransactionAndroidParams.hpp"
#include <functional>
#include "JFunc_void_NitroPurchase.hpp"
#include "JFunc_void_NitroPurchaseResult.hpp"
#include "JFunc_void_NitroProduct.hpp"
#include "NitroReceiptValidationParams.hpp"
#include "JNitroReceiptValidationParams.hpp"
#include "NitroReceiptValidationAndroidOptions.hpp"
#include "JNitroReceiptValidationAndroidOptions.hpp"
#include "NitroDeepLinkOptionsAndroid.hpp"
#include "JNitroDeepLinkOptionsAndroid.hpp"

namespace margelo::nitro::iap {

  jni::local_ref<JHybridRnIapSpec::jhybriddata> JHybridRnIapSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridRnIapSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridRnIapSpec::initHybrid),
    });
  }

  size_t JHybridRnIapSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  void JHybridRnIapSpec::dispose() noexcept {
    static const auto method = javaClassStatic()->getMethod<void()>("dispose");
    method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<bool>> JHybridRnIapSpec::initConnection() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("initConnection");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridRnIapSpec::endConnection() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("endConnection");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::vector<NitroProduct>>> JHybridRnIapSpec::fetchProducts(const std::vector<std::string>& skus, const std::string& type) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JArrayClass<jni::JString>> /* skus */, jni::alias_ref<jni::JString> /* type */)>("fetchProducts");
    auto __result = method(_javaPart, [&]() {
      size_t __size = skus.size();
      jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
      for (size_t __i = 0; __i < __size; __i++) {
        const auto& __element = skus[__i];
        __array->setElement(__i, *jni::make_jstring(__element));
      }
      return __array;
    }(), jni::make_jstring(type));
    return [&]() {
      auto __promise = Promise<std::vector<NitroProduct>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JNitroProduct>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<NitroProduct> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<RequestPurchaseResult>> JHybridRnIapSpec::requestPurchase(const NitroPurchaseRequest& request) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JNitroPurchaseRequest> /* request */)>("requestPurchase");
    auto __result = method(_javaPart, JNitroPurchaseRequest::fromCpp(request));
    return [&]() {
      auto __promise = Promise<RequestPurchaseResult>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JRequestPurchaseResult>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::vector<NitroPurchase>>> JHybridRnIapSpec::getAvailablePurchases(const std::optional<NitroAvailablePurchasesOptions>& options) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JNitroAvailablePurchasesOptions> /* options */)>("getAvailablePurchases");
    auto __result = method(_javaPart, options.has_value() ? JNitroAvailablePurchasesOptions::fromCpp(options.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<std::vector<NitroPurchase>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JNitroPurchase>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<NitroPurchase> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::variant<bool, NitroPurchaseResult>>> JHybridRnIapSpec::finishTransaction(const NitroFinishTransactionParams& params) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JNitroFinishTransactionParams> /* params */)>("finishTransaction");
    auto __result = method(_javaPart, JNitroFinishTransactionParams::fromCpp(params));
    return [&]() {
      auto __promise = Promise<std::variant<bool, NitroPurchaseResult>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JVariant_Boolean_NitroPurchaseResult>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  void JHybridRnIapSpec::addPurchaseUpdatedListener(const std::function<void(const NitroPurchase& /* purchase */)>& listener) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_NitroPurchase::javaobject> /* listener */)>("addPurchaseUpdatedListener_cxx");
    method(_javaPart, JFunc_void_NitroPurchase_cxx::fromCpp(listener));
  }
  void JHybridRnIapSpec::addPurchaseErrorListener(const std::function<void(const NitroPurchaseResult& /* error */)>& listener) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_NitroPurchaseResult::javaobject> /* listener */)>("addPurchaseErrorListener_cxx");
    method(_javaPart, JFunc_void_NitroPurchaseResult_cxx::fromCpp(listener));
  }
  void JHybridRnIapSpec::removePurchaseUpdatedListener(const std::function<void(const NitroPurchase& /* purchase */)>& listener) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_NitroPurchase::javaobject> /* listener */)>("removePurchaseUpdatedListener_cxx");
    method(_javaPart, JFunc_void_NitroPurchase_cxx::fromCpp(listener));
  }
  void JHybridRnIapSpec::removePurchaseErrorListener(const std::function<void(const NitroPurchaseResult& /* error */)>& listener) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_NitroPurchaseResult::javaobject> /* listener */)>("removePurchaseErrorListener_cxx");
    method(_javaPart, JFunc_void_NitroPurchaseResult_cxx::fromCpp(listener));
  }
  void JHybridRnIapSpec::addPromotedProductListenerIOS(const std::function<void(const NitroProduct& /* product */)>& listener) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_NitroProduct::javaobject> /* listener */)>("addPromotedProductListenerIOS_cxx");
    method(_javaPart, JFunc_void_NitroProduct_cxx::fromCpp(listener));
  }
  void JHybridRnIapSpec::removePromotedProductListenerIOS(const std::function<void(const NitroProduct& /* product */)>& listener) {
    static const auto method = javaClassStatic()->getMethod<void(jni::alias_ref<JFunc_void_NitroProduct::javaobject> /* listener */)>("removePromotedProductListenerIOS_cxx");
    method(_javaPart, JFunc_void_NitroProduct_cxx::fromCpp(listener));
  }
  std::shared_ptr<Promise<std::string>> JHybridRnIapSpec::getStorefrontIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getStorefrontIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::optional<std::string>>> JHybridRnIapSpec::getAppTransactionIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getAppTransactionIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::optional<std::string>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::optional<NitroProduct>>> JHybridRnIapSpec::requestPromotedProductIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("requestPromotedProductIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::optional<NitroProduct>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JNitroProduct>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridRnIapSpec::buyPromotedProductIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("buyPromotedProductIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridRnIapSpec::presentCodeRedemptionSheetIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("presentCodeRedemptionSheetIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridRnIapSpec::clearTransactionIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("clearTransactionIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::optional<std::string>>> JHybridRnIapSpec::beginRefundRequestIOS(const std::string& sku) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* sku */)>("beginRefundRequestIOS");
    auto __result = method(_javaPart, jni::make_jstring(sku));
    return [&]() {
      auto __promise = Promise<std::optional<std::string>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::optional<std::vector<NitroSubscriptionStatus>>>> JHybridRnIapSpec::subscriptionStatusIOS(const std::string& sku) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* sku */)>("subscriptionStatusIOS");
    auto __result = method(_javaPart, jni::make_jstring(sku));
    return [&]() {
      auto __promise = Promise<std::optional<std::vector<NitroSubscriptionStatus>>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JNitroSubscriptionStatus>>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional([&]() {
          size_t __size = __result->size();
          std::vector<NitroSubscriptionStatus> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::optional<NitroPurchase>>> JHybridRnIapSpec::currentEntitlementIOS(const std::string& sku) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* sku */)>("currentEntitlementIOS");
    auto __result = method(_javaPart, jni::make_jstring(sku));
    return [&]() {
      auto __promise = Promise<std::optional<NitroPurchase>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JNitroPurchase>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::optional<NitroPurchase>>> JHybridRnIapSpec::latestTransactionIOS(const std::string& sku) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* sku */)>("latestTransactionIOS");
    auto __result = method(_javaPart, jni::make_jstring(sku));
    return [&]() {
      auto __promise = Promise<std::optional<NitroPurchase>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JNitroPurchase>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(__result->toCpp()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::vector<NitroPurchase>>> JHybridRnIapSpec::getPendingTransactionsIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getPendingTransactionsIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::vector<NitroPurchase>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JNitroPurchase>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<NitroPurchase> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridRnIapSpec::syncIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("syncIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::vector<NitroPurchase>>> JHybridRnIapSpec::showManageSubscriptionsIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("showManageSubscriptionsIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::vector<NitroPurchase>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JArrayClass<JNitroPurchase>>(__boxedResult);
        __promise->resolve([&]() {
          size_t __size = __result->size();
          std::vector<NitroPurchase> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = __result->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridRnIapSpec::isEligibleForIntroOfferIOS(const std::string& groupID) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* groupID */)>("isEligibleForIntroOfferIOS");
    auto __result = method(_javaPart, jni::make_jstring(groupID));
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::string>> JHybridRnIapSpec::getReceiptDataIOS() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getReceiptDataIOS");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridRnIapSpec::isTransactionVerifiedIOS(const std::string& sku) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* sku */)>("isTransactionVerifiedIOS");
    auto __result = method(_javaPart, jni::make_jstring(sku));
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::optional<std::string>>> JHybridRnIapSpec::getTransactionJwsIOS(const std::string& sku) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* sku */)>("getTransactionJwsIOS");
    auto __result = method(_javaPart, jni::make_jstring(sku));
    return [&]() {
      auto __promise = Promise<std::optional<std::string>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result != nullptr ? std::make_optional(__result->toStdString()) : std::nullopt);
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::variant<NitroReceiptValidationResultIOS, NitroReceiptValidationResultAndroid>>> JHybridRnIapSpec::validateReceipt(const NitroReceiptValidationParams& params) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JNitroReceiptValidationParams> /* params */)>("validateReceipt");
    auto __result = method(_javaPart, JNitroReceiptValidationParams::fromCpp(params));
    return [&]() {
      auto __promise = Promise<std::variant<NitroReceiptValidationResultIOS, NitroReceiptValidationResultAndroid>>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<JVariant_NitroReceiptValidationResultIOS_NitroReceiptValidationResultAndroid>(__boxedResult);
        __promise->resolve(__result->toCpp());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<std::string>> JHybridRnIapSpec::getStorefrontAndroid() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("getStorefrontAndroid");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<std::string>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JString>(__boxedResult);
        __promise->resolve(__result->toStdString());
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridRnIapSpec::deepLinkToSubscriptionsAndroid(const NitroDeepLinkOptionsAndroid& options) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<JNitroDeepLinkOptionsAndroid> /* options */)>("deepLinkToSubscriptionsAndroid");
    auto __result = method(_javaPart, JNitroDeepLinkOptionsAndroid::fromCpp(options));
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::iap
