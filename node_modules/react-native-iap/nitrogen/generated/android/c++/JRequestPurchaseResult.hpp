///
/// JRequestPurchaseResult.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "RequestPurchaseResult.hpp"

#include "IapPlatform.hpp"
#include "JIapPlatform.hpp"
#include "JPurchase.hpp"
#include "JPurchaseAndroid.hpp"
#include "JPurchaseIOS.hpp"
#include "JPurchaseOfferIOS.hpp"
#include "JPurchaseState.hpp"
#include "JVariant_PurchaseAndroid_PurchaseIOS.hpp"
#include "PurchaseAndroid.hpp"
#include "PurchaseIOS.hpp"
#include "PurchaseOfferIOS.hpp"
#include "PurchaseState.hpp"
#include <optional>
#include <string>
#include <variant>
#include <vector>

namespace margelo::nitro::iap {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "RequestPurchaseResult" and the the Kotlin data class "RequestPurchaseResult".
   */
  struct JRequestPurchaseResult final: public jni::JavaClass<JRequestPurchaseResult> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/iap/RequestPurchaseResult;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct RequestPurchaseResult by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    RequestPurchaseResult toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldPurchase = clazz->getField<JVariant_PurchaseAndroid_PurchaseIOS>("purchase");
      jni::local_ref<JVariant_PurchaseAndroid_PurchaseIOS> purchase = this->getFieldValue(fieldPurchase);
      static const auto fieldPurchases = clazz->getField<jni::JArrayClass<JPurchase>>("purchases");
      jni::local_ref<jni::JArrayClass<JPurchase>> purchases = this->getFieldValue(fieldPurchases);
      return RequestPurchaseResult(
        purchase != nullptr ? std::make_optional(purchase->toCpp()) : std::nullopt,
        purchases != nullptr ? std::make_optional([&]() {
          size_t __size = purchases->size();
          std::vector<std::variant<PurchaseAndroid, PurchaseIOS>> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = purchases->getElement(__i);
            __vector.push_back(__element->toCpp());
          }
          return __vector;
        }()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JRequestPurchaseResult::javaobject> fromCpp(const RequestPurchaseResult& value) {
      return newInstance(
        value.purchase.has_value() ? JVariant_PurchaseAndroid_PurchaseIOS::fromCpp(value.purchase.value()) : nullptr,
        value.purchases.has_value() ? [&]() {
          size_t __size = value.purchases.value().size();
          jni::local_ref<jni::JArrayClass<JPurchase>> __array = jni::JArrayClass<JPurchase>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.purchases.value()[__i];
            __array->setElement(__i, *JPurchase::fromCpp(__element));
          }
          return __array;
        }() : nullptr
      );
    }
  };

} // namespace margelo::nitro::iap
