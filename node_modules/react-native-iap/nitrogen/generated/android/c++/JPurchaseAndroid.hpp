///
/// JPurchaseAndroid.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "PurchaseAndroid.hpp"

#include "IapPlatform.hpp"
#include "JIapPlatform.hpp"
#include "JPurchaseState.hpp"
#include "PurchaseState.hpp"
#include <optional>
#include <string>
#include <vector>

namespace margelo::nitro::iap {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "PurchaseAndroid" and the the Kotlin data class "PurchaseAndroid".
   */
  struct JPurchaseAndroid final: public jni::JavaClass<JPurchaseAndroid> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/iap/PurchaseAndroid;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct PurchaseAndroid by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    PurchaseAndroid toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldAutoRenewingAndroid = clazz->getField<jni::JBoolean>("autoRenewingAndroid");
      jni::local_ref<jni::JBoolean> autoRenewingAndroid = this->getFieldValue(fieldAutoRenewingAndroid);
      static const auto fieldDataAndroid = clazz->getField<jni::JString>("dataAndroid");
      jni::local_ref<jni::JString> dataAndroid = this->getFieldValue(fieldDataAndroid);
      static const auto fieldDeveloperPayloadAndroid = clazz->getField<jni::JString>("developerPayloadAndroid");
      jni::local_ref<jni::JString> developerPayloadAndroid = this->getFieldValue(fieldDeveloperPayloadAndroid);
      static const auto fieldId = clazz->getField<jni::JString>("id");
      jni::local_ref<jni::JString> id = this->getFieldValue(fieldId);
      static const auto fieldIds = clazz->getField<jni::JArrayClass<jni::JString>>("ids");
      jni::local_ref<jni::JArrayClass<jni::JString>> ids = this->getFieldValue(fieldIds);
      static const auto fieldIsAcknowledgedAndroid = clazz->getField<jni::JBoolean>("isAcknowledgedAndroid");
      jni::local_ref<jni::JBoolean> isAcknowledgedAndroid = this->getFieldValue(fieldIsAcknowledgedAndroid);
      static const auto fieldIsAutoRenewing = clazz->getField<jboolean>("isAutoRenewing");
      jboolean isAutoRenewing = this->getFieldValue(fieldIsAutoRenewing);
      static const auto fieldObfuscatedAccountIdAndroid = clazz->getField<jni::JString>("obfuscatedAccountIdAndroid");
      jni::local_ref<jni::JString> obfuscatedAccountIdAndroid = this->getFieldValue(fieldObfuscatedAccountIdAndroid);
      static const auto fieldObfuscatedProfileIdAndroid = clazz->getField<jni::JString>("obfuscatedProfileIdAndroid");
      jni::local_ref<jni::JString> obfuscatedProfileIdAndroid = this->getFieldValue(fieldObfuscatedProfileIdAndroid);
      static const auto fieldPackageNameAndroid = clazz->getField<jni::JString>("packageNameAndroid");
      jni::local_ref<jni::JString> packageNameAndroid = this->getFieldValue(fieldPackageNameAndroid);
      static const auto fieldPlatform = clazz->getField<JIapPlatform>("platform");
      jni::local_ref<JIapPlatform> platform = this->getFieldValue(fieldPlatform);
      static const auto fieldProductId = clazz->getField<jni::JString>("productId");
      jni::local_ref<jni::JString> productId = this->getFieldValue(fieldProductId);
      static const auto fieldPurchaseState = clazz->getField<JPurchaseState>("purchaseState");
      jni::local_ref<JPurchaseState> purchaseState = this->getFieldValue(fieldPurchaseState);
      static const auto fieldPurchaseToken = clazz->getField<jni::JString>("purchaseToken");
      jni::local_ref<jni::JString> purchaseToken = this->getFieldValue(fieldPurchaseToken);
      static const auto fieldQuantity = clazz->getField<double>("quantity");
      double quantity = this->getFieldValue(fieldQuantity);
      static const auto fieldSignatureAndroid = clazz->getField<jni::JString>("signatureAndroid");
      jni::local_ref<jni::JString> signatureAndroid = this->getFieldValue(fieldSignatureAndroid);
      static const auto fieldTransactionDate = clazz->getField<double>("transactionDate");
      double transactionDate = this->getFieldValue(fieldTransactionDate);
      return PurchaseAndroid(
        autoRenewingAndroid != nullptr ? std::make_optional(static_cast<bool>(autoRenewingAndroid->value())) : std::nullopt,
        dataAndroid != nullptr ? std::make_optional(dataAndroid->toStdString()) : std::nullopt,
        developerPayloadAndroid != nullptr ? std::make_optional(developerPayloadAndroid->toStdString()) : std::nullopt,
        id->toStdString(),
        ids != nullptr ? std::make_optional([&]() {
          size_t __size = ids->size();
          std::vector<std::string> __vector;
          __vector.reserve(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            auto __element = ids->getElement(__i);
            __vector.push_back(__element->toStdString());
          }
          return __vector;
        }()) : std::nullopt,
        isAcknowledgedAndroid != nullptr ? std::make_optional(static_cast<bool>(isAcknowledgedAndroid->value())) : std::nullopt,
        static_cast<bool>(isAutoRenewing),
        obfuscatedAccountIdAndroid != nullptr ? std::make_optional(obfuscatedAccountIdAndroid->toStdString()) : std::nullopt,
        obfuscatedProfileIdAndroid != nullptr ? std::make_optional(obfuscatedProfileIdAndroid->toStdString()) : std::nullopt,
        packageNameAndroid != nullptr ? std::make_optional(packageNameAndroid->toStdString()) : std::nullopt,
        platform->toCpp(),
        productId->toStdString(),
        purchaseState->toCpp(),
        purchaseToken != nullptr ? std::make_optional(purchaseToken->toStdString()) : std::nullopt,
        quantity,
        signatureAndroid != nullptr ? std::make_optional(signatureAndroid->toStdString()) : std::nullopt,
        transactionDate
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JPurchaseAndroid::javaobject> fromCpp(const PurchaseAndroid& value) {
      return newInstance(
        value.autoRenewingAndroid.has_value() ? jni::JBoolean::valueOf(value.autoRenewingAndroid.value()) : nullptr,
        value.dataAndroid.has_value() ? jni::make_jstring(value.dataAndroid.value()) : nullptr,
        value.developerPayloadAndroid.has_value() ? jni::make_jstring(value.developerPayloadAndroid.value()) : nullptr,
        jni::make_jstring(value.id),
        value.ids.has_value() ? [&]() {
          size_t __size = value.ids.value().size();
          jni::local_ref<jni::JArrayClass<jni::JString>> __array = jni::JArrayClass<jni::JString>::newArray(__size);
          for (size_t __i = 0; __i < __size; __i++) {
            const auto& __element = value.ids.value()[__i];
            __array->setElement(__i, *jni::make_jstring(__element));
          }
          return __array;
        }() : nullptr,
        value.isAcknowledgedAndroid.has_value() ? jni::JBoolean::valueOf(value.isAcknowledgedAndroid.value()) : nullptr,
        value.isAutoRenewing,
        value.obfuscatedAccountIdAndroid.has_value() ? jni::make_jstring(value.obfuscatedAccountIdAndroid.value()) : nullptr,
        value.obfuscatedProfileIdAndroid.has_value() ? jni::make_jstring(value.obfuscatedProfileIdAndroid.value()) : nullptr,
        value.packageNameAndroid.has_value() ? jni::make_jstring(value.packageNameAndroid.value()) : nullptr,
        JIapPlatform::fromCpp(value.platform),
        jni::make_jstring(value.productId),
        JPurchaseState::fromCpp(value.purchaseState),
        value.purchaseToken.has_value() ? jni::make_jstring(value.purchaseToken.value()) : nullptr,
        value.quantity,
        value.signatureAndroid.has_value() ? jni::make_jstring(value.signatureAndroid.value()) : nullptr,
        value.transactionDate
      );
    }
  };

} // namespace margelo::nitro::iap
