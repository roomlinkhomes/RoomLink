///
/// JNitroSubscriptionStatus.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroSubscriptionStatus.hpp"

#include "JNitroSubscriptionRenewalInfo.hpp"
#include "NitroSubscriptionRenewalInfo.hpp"
#include <optional>
#include <string>

namespace margelo::nitro::iap {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroSubscriptionStatus" and the the Kotlin data class "NitroSubscriptionStatus".
   */
  struct JNitroSubscriptionStatus final: public jni::JavaClass<JNitroSubscriptionStatus> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/iap/NitroSubscriptionStatus;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroSubscriptionStatus by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroSubscriptionStatus toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldState = clazz->getField<double>("state");
      double state = this->getFieldValue(fieldState);
      static const auto fieldPlatform = clazz->getField<jni::JString>("platform");
      jni::local_ref<jni::JString> platform = this->getFieldValue(fieldPlatform);
      static const auto fieldRenewalInfo = clazz->getField<JNitroSubscriptionRenewalInfo>("renewalInfo");
      jni::local_ref<JNitroSubscriptionRenewalInfo> renewalInfo = this->getFieldValue(fieldRenewalInfo);
      return NitroSubscriptionStatus(
        state,
        platform->toStdString(),
        renewalInfo != nullptr ? std::make_optional(renewalInfo->toCpp()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroSubscriptionStatus::javaobject> fromCpp(const NitroSubscriptionStatus& value) {
      return newInstance(
        value.state,
        jni::make_jstring(value.platform),
        value.renewalInfo.has_value() ? JNitroSubscriptionRenewalInfo::fromCpp(value.renewalInfo.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::iap
