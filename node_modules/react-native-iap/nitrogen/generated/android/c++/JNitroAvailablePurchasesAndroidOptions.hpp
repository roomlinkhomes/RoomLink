///
/// JNitroAvailablePurchasesAndroidOptions.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#include <fbjni/fbjni.h>
#include "NitroAvailablePurchasesAndroidOptions.hpp"

#include <optional>
#include <string>

namespace margelo::nitro::iap {

  using namespace facebook;

  /**
   * The C++ JNI bridge between the C++ struct "NitroAvailablePurchasesAndroidOptions" and the the Kotlin data class "NitroAvailablePurchasesAndroidOptions".
   */
  struct JNitroAvailablePurchasesAndroidOptions final: public jni::JavaClass<JNitroAvailablePurchasesAndroidOptions> {
  public:
    static auto constexpr kJavaDescriptor = "Lcom/margelo/nitro/iap/NitroAvailablePurchasesAndroidOptions;";

  public:
    /**
     * Convert this Java/Kotlin-based struct to the C++ struct NitroAvailablePurchasesAndroidOptions by copying all values to C++.
     */
    [[maybe_unused]]
    [[nodiscard]]
    NitroAvailablePurchasesAndroidOptions toCpp() const {
      static const auto clazz = javaClassStatic();
      static const auto fieldType = clazz->getField<jni::JString>("type");
      jni::local_ref<jni::JString> type = this->getFieldValue(fieldType);
      return NitroAvailablePurchasesAndroidOptions(
        type != nullptr ? std::make_optional(type->toStdString()) : std::nullopt
      );
    }

  public:
    /**
     * Create a Java/Kotlin-based struct by copying all values from the given C++ struct to Java.
     */
    [[maybe_unused]]
    static jni::local_ref<JNitroAvailablePurchasesAndroidOptions::javaobject> fromCpp(const NitroAvailablePurchasesAndroidOptions& value) {
      return newInstance(
        value.type.has_value() ? jni::make_jstring(value.type.value()) : nullptr
      );
    }
  };

} // namespace margelo::nitro::iap
