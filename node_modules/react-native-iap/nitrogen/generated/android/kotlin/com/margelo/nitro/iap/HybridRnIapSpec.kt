///
/// HybridRnIapSpec.kt
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

package com.margelo.nitro.iap

import androidx.annotation.Keep
import com.facebook.jni.HybridData
import com.facebook.proguard.annotations.DoNotStrip
import com.margelo.nitro.core.*

/**
 * A Kotlin class representing the RnIap HybridObject.
 * Implement this abstract class to create Kotlin-based instances of RnIap.
 */
@DoNotStrip
@Keep
@Suppress(
  "KotlinJniMissingFunction", "unused",
  "RedundantSuppression", "RedundantUnitReturnType", "SimpleRedundantLet",
  "LocalVariableName", "PropertyName", "PrivatePropertyName", "FunctionName"
)
abstract class HybridRnIapSpec: HybridObject() {
  @DoNotStrip
  private var mHybridData: HybridData = initHybrid()

  init {
    super.updateNative(mHybridData)
  }

  override fun updateNative(hybridData: HybridData) {
    mHybridData = hybridData
    super.updateNative(hybridData)
  }

  // Properties
  

  // Methods
  @DoNotStrip
  @Keep
  abstract fun initConnection(): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun endConnection(): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun fetchProducts(skus: Array<String>, type: String): Promise<Array<NitroProduct>>
  
  @DoNotStrip
  @Keep
  abstract fun requestPurchase(request: NitroPurchaseRequest): Promise<RequestPurchaseResult>
  
  @DoNotStrip
  @Keep
  abstract fun getAvailablePurchases(options: NitroAvailablePurchasesOptions?): Promise<Array<NitroPurchase>>
  
  @DoNotStrip
  @Keep
  abstract fun finishTransaction(params: NitroFinishTransactionParams): Promise<Variant_Boolean_NitroPurchaseResult>
  
  abstract fun addPurchaseUpdatedListener(listener: (purchase: NitroPurchase) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun addPurchaseUpdatedListener_cxx(listener: Func_void_NitroPurchase): Unit {
    val __result = addPurchaseUpdatedListener(listener)
    return __result
  }
  
  abstract fun addPurchaseErrorListener(listener: (error: NitroPurchaseResult) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun addPurchaseErrorListener_cxx(listener: Func_void_NitroPurchaseResult): Unit {
    val __result = addPurchaseErrorListener(listener)
    return __result
  }
  
  abstract fun removePurchaseUpdatedListener(listener: (purchase: NitroPurchase) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun removePurchaseUpdatedListener_cxx(listener: Func_void_NitroPurchase): Unit {
    val __result = removePurchaseUpdatedListener(listener)
    return __result
  }
  
  abstract fun removePurchaseErrorListener(listener: (error: NitroPurchaseResult) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun removePurchaseErrorListener_cxx(listener: Func_void_NitroPurchaseResult): Unit {
    val __result = removePurchaseErrorListener(listener)
    return __result
  }
  
  abstract fun addPromotedProductListenerIOS(listener: (product: NitroProduct) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun addPromotedProductListenerIOS_cxx(listener: Func_void_NitroProduct): Unit {
    val __result = addPromotedProductListenerIOS(listener)
    return __result
  }
  
  abstract fun removePromotedProductListenerIOS(listener: (product: NitroProduct) -> Unit): Unit
  
  @DoNotStrip
  @Keep
  private fun removePromotedProductListenerIOS_cxx(listener: Func_void_NitroProduct): Unit {
    val __result = removePromotedProductListenerIOS(listener)
    return __result
  }
  
  @DoNotStrip
  @Keep
  abstract fun getStorefrontIOS(): Promise<String>
  
  @DoNotStrip
  @Keep
  abstract fun getAppTransactionIOS(): Promise<String?>
  
  @DoNotStrip
  @Keep
  abstract fun requestPromotedProductIOS(): Promise<NitroProduct?>
  
  @DoNotStrip
  @Keep
  abstract fun buyPromotedProductIOS(): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun presentCodeRedemptionSheetIOS(): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun clearTransactionIOS(): Promise<Unit>
  
  @DoNotStrip
  @Keep
  abstract fun beginRefundRequestIOS(sku: String): Promise<String?>
  
  @DoNotStrip
  @Keep
  abstract fun subscriptionStatusIOS(sku: String): Promise<Array<NitroSubscriptionStatus>?>
  
  @DoNotStrip
  @Keep
  abstract fun currentEntitlementIOS(sku: String): Promise<NitroPurchase?>
  
  @DoNotStrip
  @Keep
  abstract fun latestTransactionIOS(sku: String): Promise<NitroPurchase?>
  
  @DoNotStrip
  @Keep
  abstract fun getPendingTransactionsIOS(): Promise<Array<NitroPurchase>>
  
  @DoNotStrip
  @Keep
  abstract fun syncIOS(): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun showManageSubscriptionsIOS(): Promise<Array<NitroPurchase>>
  
  @DoNotStrip
  @Keep
  abstract fun isEligibleForIntroOfferIOS(groupID: String): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun getReceiptDataIOS(): Promise<String>
  
  @DoNotStrip
  @Keep
  abstract fun isTransactionVerifiedIOS(sku: String): Promise<Boolean>
  
  @DoNotStrip
  @Keep
  abstract fun getTransactionJwsIOS(sku: String): Promise<String?>
  
  @DoNotStrip
  @Keep
  abstract fun validateReceipt(params: NitroReceiptValidationParams): Promise<Variant_NitroReceiptValidationResultIOS_NitroReceiptValidationResultAndroid>
  
  @DoNotStrip
  @Keep
  abstract fun getStorefrontAndroid(): Promise<String>
  
  @DoNotStrip
  @Keep
  abstract fun deepLinkToSubscriptionsAndroid(options: NitroDeepLinkOptionsAndroid): Promise<Unit>

  private external fun initHybrid(): HybridData

  companion object {
    private const val TAG = "HybridRnIapSpec"
  }
}
