"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = exports.modifyProjectBuildGradle = void 0;
const config_plugins_1 = require("expo/config-plugins");
const pkg = require('../../package.json');
// Global flag to prevent duplicate logs
let hasLoggedPluginExecution = false;
const addLineToGradle = (content, anchor, lineToAdd, offset = 1) => {
    const lines = content.split('\n');
    const index = lines.findIndex((line) => line.match(anchor));
    if (index === -1) {
        console.warn(`Anchor "${anchor}" not found in build.gradle. Appending to end.`);
        lines.push(lineToAdd);
    }
    else {
        lines.splice(index + offset, 0, lineToAdd);
    }
    return lines.join('\n');
};
const modifyProjectBuildGradle = (gradle) => {
    // Keep backward-compatible behavior: add supportLibVersion inside ext { } if missing
    if (!gradle.includes('supportLibVersion')) {
        const lines = gradle.split('\n');
        const extIndex = lines.findIndex((line) => line.trim() === 'ext {');
        if (extIndex !== -1) {
            lines.splice(extIndex + 1, 0, 'supportLibVersion = "28.0.0"');
            return lines.join('\n');
        }
    }
    return gradle;
};
exports.modifyProjectBuildGradle = modifyProjectBuildGradle;
const OPENIAP_COORD = 'io.github.hyochan.openiap:openiap-google';
const OPENIAP_VERSION = '1.1.11';
const modifyAppBuildGradle = (gradle) => {
    let modified = gradle;
    // Replace legacy Billing/GMS instructions with OpenIAP Google library
    // Remove any old billingclient or play-services-base lines we may have added previously
    modified = modified
        .replace(/^[ \t]*(implementation|api)[ \t]+["']com\.android\.billingclient:billing-ktx:[^"']+["'][ \t]*$/gim, '')
        .replace(/^[ \t]*(implementation|api)[ \t]+["']com\.google\.android\.gms:play-services-base:[^"']+["'][ \t]*$/gim, '')
        .replace(/\n{3,}/g, '\n\n');
    const openiapDep = `    implementation "${OPENIAP_COORD}:${OPENIAP_VERSION}"`;
    if (!modified.includes(OPENIAP_COORD)) {
        if (!/dependencies\s*{/.test(modified)) {
            modified += `\n\ndependencies {\n${openiapDep}\n}\n`;
        }
        else {
            modified = addLineToGradle(modified, /dependencies\s*{/, openiapDep);
        }
        if (!hasLoggedPluginExecution) {
            console.log(`🛠️ react-native-iap: Added OpenIAP (${OPENIAP_VERSION}) to build.gradle`);
        }
    }
    return modified;
};
const withIapAndroid = (config) => {
    // Add OpenIAP dependency to app build.gradle
    config = (0, config_plugins_1.withAppBuildGradle)(config, (config) => {
        config.modResults.contents = modifyAppBuildGradle(config.modResults.contents);
        return config;
    });
    config = (0, config_plugins_1.withAndroidManifest)(config, (config) => {
        const manifest = config.modResults;
        if (!manifest.manifest['uses-permission']) {
            manifest.manifest['uses-permission'] = [];
        }
        const permissions = manifest.manifest['uses-permission'];
        const billingPerm = { $: { 'android:name': 'com.android.vending.BILLING' } };
        const alreadyExists = permissions.some((p) => p.$['android:name'] === 'com.android.vending.BILLING');
        if (!alreadyExists) {
            permissions.push(billingPerm);
            if (!hasLoggedPluginExecution) {
                console.log('✅ Added com.android.vending.BILLING to AndroidManifest.xml');
            }
        }
        else {
            if (!hasLoggedPluginExecution) {
                console.log('ℹ️ com.android.vending.BILLING already exists in AndroidManifest.xml');
            }
        }
        return config;
    });
    return config;
};
const withIapIosFollyWorkaround = (config, props) => {
    const enabled = !!props?.ios?.['with-folly-no-couroutines'];
    if (!enabled)
        return config;
    return (0, config_plugins_1.withPodfile)(config, (config) => {
        let contents = config.modResults.contents;
        // Idempotency: if any of the defines already exists, assume it's applied
        if (contents.includes('FOLLY_CFG_NO_COROUTINES') ||
            contents.includes('FOLLY_HAS_COROUTINES=0')) {
            return config;
        }
        const anchor = 'post_install do |installer|';
        const snippet = `
  # react-native-iap (expo): Disable Folly coroutines to avoid including non-vendored <folly/coro/*> headers
  installer.pods_project.targets.each do |target|
    target.build_configurations.each do |config|
      defs = (config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] || ['$(inherited)'])
      defs << 'FOLLY_NO_CONFIG=1' unless defs.any? { |d| d.to_s.include?('FOLLY_NO_CONFIG') }
      # Portability.h respects FOLLY_CFG_NO_COROUTINES to fully disable coroutine support
      defs << 'FOLLY_CFG_NO_COROUTINES=1' unless defs.any? { |d| d.to_s.include?('FOLLY_CFG_NO_COROUTINES') }
      defs << 'FOLLY_HAS_COROUTINES=0' unless defs.any? { |d| d.to_s.include?('FOLLY_HAS_COROUTINES') }
      config.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = defs
    end
  end`;
        if (contents.includes(anchor)) {
            contents = contents.replace(anchor, `${anchor}\n${snippet}`);
        }
        else {
            // As a fallback, append a new post_install block
            contents += `

${anchor}
${snippet}
end
`;
        }
        config.modResults.contents = contents;
        return config;
    });
};
const withIAP = (config, props) => {
    try {
        let result = withIapAndroid(config);
        result = withIapIosFollyWorkaround(result, props);
        // Set flag after first execution to prevent duplicate logs
        hasLoggedPluginExecution = true;
        return result;
    }
    catch (error) {
        config_plugins_1.WarningAggregator.addWarningAndroid('react-native-iap', `react-native-iap plugin encountered an error: ${error}`);
        console.error('react-native-iap plugin error:', error);
        return config;
    }
};
const _wrapped = (0, config_plugins_1.createRunOncePlugin)(withIAP, pkg.name, pkg.version);
const pluginExport = ((config, props) => _wrapped(config, props));
exports.default = pluginExport;
